// Code generated by protoc-gen-go. DO NOT EDIT.
// source: qrlwallet.proto

/*
Package qrl is a generated protocol buffer package.

It is generated from these files:
	qrlwallet.proto

It has these top-level messages:
	AddNewAddressReq
	AddNewAddressResp
	AddNewAddressWithSlavesReq
	AddAddressFromSeedReq
	AddAddressFromSeedResp
	ListAddressesReq
	ListAddressesResp
	RemoveAddressReq
	RemoveAddressResp
	ValidAddressReq
	ValidAddressResp
	EncryptWalletReq
	EncryptWalletResp
	UnlockWalletReq
	UnlockWalletResp
	LockWalletReq
	LockWalletResp
	GetRecoverySeedsReq
	GetRecoverySeedsResp
	GetWalletInfoReq
	GetWalletInfoResp
	RelayTransferTxnReq
	RelayTransferTxnBySlaveReq
	RelayMessageTxnReq
	RelayMessageTxnBySlaveReq
	RelayTokenTxnReq
	RelayTokenTxnBySlaveReq
	RelayTransferTokenTxnReq
	RelayTransferTokenTxnBySlaveReq
	RelaySlaveTxnReq
	RelaySlaveTxnBySlaveReq
	RelayTxnResp
	ChangePassphraseReq
	ChangePassphraseResp
	TransactionsByAddressReq
	TransactionsByAddressResp
	TransactionReq
	TransactionResp
	BalanceReq
	BalanceResp
	OTSReq
	OTSResp
	HeightReq
	HeightResp
	BlockReq
	BlockResp
	BlockByNumberReq
	AddressFromPKReq
	AddressFromPKResp
	NodeInfoReq
	NodeInfoResp
	PlainGenesisBalance
	PlainAddressAmount
	PlainTransaction
	PlainBlockHeader
	PlainBlock
*/
package qrlwallet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import qrl1 "github.com/theQRL/walletd-rest-proxy/generated"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddNewAddressReq struct {
	Height       uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	HashFunction string `protobuf:"bytes,2,opt,name=hash_function,json=hashFunction" json:"hash_function,omitempty"`
}

func (m *AddNewAddressReq) Reset()                    { *m = AddNewAddressReq{} }
func (m *AddNewAddressReq) String() string            { return proto.CompactTextString(m) }
func (*AddNewAddressReq) ProtoMessage()               {}
func (*AddNewAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddNewAddressReq) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *AddNewAddressReq) GetHashFunction() string {
	if m != nil {
		return m.HashFunction
	}
	return ""
}

type AddNewAddressResp struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *AddNewAddressResp) Reset()                    { *m = AddNewAddressResp{} }
func (m *AddNewAddressResp) String() string            { return proto.CompactTextString(m) }
func (*AddNewAddressResp) ProtoMessage()               {}
func (*AddNewAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddNewAddressResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AddNewAddressResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *AddNewAddressResp) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddNewAddressWithSlavesReq struct {
	Height         uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	NumberOfSlaves uint64 `protobuf:"varint,2,opt,name=number_of_slaves,json=numberOfSlaves" json:"number_of_slaves,omitempty"`
	HashFunction   string `protobuf:"bytes,3,opt,name=hash_function,json=hashFunction" json:"hash_function,omitempty"`
}

func (m *AddNewAddressWithSlavesReq) Reset()                    { *m = AddNewAddressWithSlavesReq{} }
func (m *AddNewAddressWithSlavesReq) String() string            { return proto.CompactTextString(m) }
func (*AddNewAddressWithSlavesReq) ProtoMessage()               {}
func (*AddNewAddressWithSlavesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddNewAddressWithSlavesReq) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *AddNewAddressWithSlavesReq) GetNumberOfSlaves() uint64 {
	if m != nil {
		return m.NumberOfSlaves
	}
	return 0
}

func (m *AddNewAddressWithSlavesReq) GetHashFunction() string {
	if m != nil {
		return m.HashFunction
	}
	return ""
}

type AddAddressFromSeedReq struct {
	Seed string `protobuf:"bytes,1,opt,name=seed" json:"seed,omitempty"`
}

func (m *AddAddressFromSeedReq) Reset()                    { *m = AddAddressFromSeedReq{} }
func (m *AddAddressFromSeedReq) String() string            { return proto.CompactTextString(m) }
func (*AddAddressFromSeedReq) ProtoMessage()               {}
func (*AddAddressFromSeedReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddAddressFromSeedReq) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

type AddAddressFromSeedResp struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *AddAddressFromSeedResp) Reset()                    { *m = AddAddressFromSeedResp{} }
func (m *AddAddressFromSeedResp) String() string            { return proto.CompactTextString(m) }
func (*AddAddressFromSeedResp) ProtoMessage()               {}
func (*AddAddressFromSeedResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddAddressFromSeedResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AddAddressFromSeedResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *AddAddressFromSeedResp) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ListAddressesReq struct {
}

func (m *ListAddressesReq) Reset()                    { *m = ListAddressesReq{} }
func (m *ListAddressesReq) String() string            { return proto.CompactTextString(m) }
func (*ListAddressesReq) ProtoMessage()               {}
func (*ListAddressesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ListAddressesResp struct {
	Code      uint32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error     string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *ListAddressesResp) Reset()                    { *m = ListAddressesResp{} }
func (m *ListAddressesResp) String() string            { return proto.CompactTextString(m) }
func (*ListAddressesResp) ProtoMessage()               {}
func (*ListAddressesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListAddressesResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListAddressesResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ListAddressesResp) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type RemoveAddressReq struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *RemoveAddressReq) Reset()                    { *m = RemoveAddressReq{} }
func (m *RemoveAddressReq) String() string            { return proto.CompactTextString(m) }
func (*RemoveAddressReq) ProtoMessage()               {}
func (*RemoveAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RemoveAddressReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RemoveAddressResp struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *RemoveAddressResp) Reset()                    { *m = RemoveAddressResp{} }
func (m *RemoveAddressResp) String() string            { return proto.CompactTextString(m) }
func (*RemoveAddressResp) ProtoMessage()               {}
func (*RemoveAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RemoveAddressResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RemoveAddressResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ValidAddressReq struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *ValidAddressReq) Reset()                    { *m = ValidAddressReq{} }
func (m *ValidAddressReq) String() string            { return proto.CompactTextString(m) }
func (*ValidAddressReq) ProtoMessage()               {}
func (*ValidAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ValidAddressReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ValidAddressResp struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Valid string `protobuf:"bytes,3,opt,name=valid" json:"valid,omitempty"`
}

func (m *ValidAddressResp) Reset()                    { *m = ValidAddressResp{} }
func (m *ValidAddressResp) String() string            { return proto.CompactTextString(m) }
func (*ValidAddressResp) ProtoMessage()               {}
func (*ValidAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ValidAddressResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ValidAddressResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ValidAddressResp) GetValid() string {
	if m != nil {
		return m.Valid
	}
	return ""
}

type EncryptWalletReq struct {
	Passphrase string `protobuf:"bytes,1,opt,name=passphrase" json:"passphrase,omitempty"`
}

func (m *EncryptWalletReq) Reset()                    { *m = EncryptWalletReq{} }
func (m *EncryptWalletReq) String() string            { return proto.CompactTextString(m) }
func (*EncryptWalletReq) ProtoMessage()               {}
func (*EncryptWalletReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EncryptWalletReq) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type EncryptWalletResp struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *EncryptWalletResp) Reset()                    { *m = EncryptWalletResp{} }
func (m *EncryptWalletResp) String() string            { return proto.CompactTextString(m) }
func (*EncryptWalletResp) ProtoMessage()               {}
func (*EncryptWalletResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EncryptWalletResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *EncryptWalletResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UnlockWalletReq struct {
	Passphrase string `protobuf:"bytes,1,opt,name=passphrase" json:"passphrase,omitempty"`
}

func (m *UnlockWalletReq) Reset()                    { *m = UnlockWalletReq{} }
func (m *UnlockWalletReq) String() string            { return proto.CompactTextString(m) }
func (*UnlockWalletReq) ProtoMessage()               {}
func (*UnlockWalletReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UnlockWalletReq) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type UnlockWalletResp struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *UnlockWalletResp) Reset()                    { *m = UnlockWalletResp{} }
func (m *UnlockWalletResp) String() string            { return proto.CompactTextString(m) }
func (*UnlockWalletResp) ProtoMessage()               {}
func (*UnlockWalletResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UnlockWalletResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UnlockWalletResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type LockWalletReq struct {
}

func (m *LockWalletReq) Reset()                    { *m = LockWalletReq{} }
func (m *LockWalletReq) String() string            { return proto.CompactTextString(m) }
func (*LockWalletReq) ProtoMessage()               {}
func (*LockWalletReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type LockWalletResp struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *LockWalletResp) Reset()                    { *m = LockWalletResp{} }
func (m *LockWalletResp) String() string            { return proto.CompactTextString(m) }
func (*LockWalletResp) ProtoMessage()               {}
func (*LockWalletResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *LockWalletResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LockWalletResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type GetRecoverySeedsReq struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *GetRecoverySeedsReq) Reset()                    { *m = GetRecoverySeedsReq{} }
func (m *GetRecoverySeedsReq) String() string            { return proto.CompactTextString(m) }
func (*GetRecoverySeedsReq) ProtoMessage()               {}
func (*GetRecoverySeedsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetRecoverySeedsReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetRecoverySeedsResp struct {
	Code     uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error    string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Hexseed  string `protobuf:"bytes,3,opt,name=hexseed" json:"hexseed,omitempty"`
	Mnemonic string `protobuf:"bytes,4,opt,name=mnemonic" json:"mnemonic,omitempty"`
}

func (m *GetRecoverySeedsResp) Reset()                    { *m = GetRecoverySeedsResp{} }
func (m *GetRecoverySeedsResp) String() string            { return proto.CompactTextString(m) }
func (*GetRecoverySeedsResp) ProtoMessage()               {}
func (*GetRecoverySeedsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetRecoverySeedsResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetRecoverySeedsResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetRecoverySeedsResp) GetHexseed() string {
	if m != nil {
		return m.Hexseed
	}
	return ""
}

func (m *GetRecoverySeedsResp) GetMnemonic() string {
	if m != nil {
		return m.Mnemonic
	}
	return ""
}

type GetWalletInfoReq struct {
}

func (m *GetWalletInfoReq) Reset()                    { *m = GetWalletInfoReq{} }
func (m *GetWalletInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetWalletInfoReq) ProtoMessage()               {}
func (*GetWalletInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type GetWalletInfoResp struct {
	Code         uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error        string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Version      uint32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	AddressCount uint64 `protobuf:"varint,4,opt,name=address_count,json=addressCount" json:"address_count,omitempty"`
	IsEncrypted  bool   `protobuf:"varint,5,opt,name=is_encrypted,json=isEncrypted" json:"is_encrypted,omitempty"`
}

func (m *GetWalletInfoResp) Reset()                    { *m = GetWalletInfoResp{} }
func (m *GetWalletInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetWalletInfoResp) ProtoMessage()               {}
func (*GetWalletInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetWalletInfoResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetWalletInfoResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *GetWalletInfoResp) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetWalletInfoResp) GetAddressCount() uint64 {
	if m != nil {
		return m.AddressCount
	}
	return 0
}

func (m *GetWalletInfoResp) GetIsEncrypted() bool {
	if m != nil {
		return m.IsEncrypted
	}
	return false
}

type RelayTransferTxnReq struct {
	AddressesTo   []string `protobuf:"bytes,1,rep,name=addresses_to,json=addressesTo" json:"addresses_to,omitempty"`
	Amounts       []uint64 `protobuf:"varint,2,rep,packed,name=amounts" json:"amounts,omitempty"`
	Fee           uint64   `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string   `protobuf:"bytes,4,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
	SignerAddress string   `protobuf:"bytes,5,opt,name=signer_address,json=signerAddress" json:"signer_address,omitempty"`
	OtsIndex      uint64   `protobuf:"varint,6,opt,name=ots_index,json=otsIndex" json:"ots_index,omitempty"`
}

func (m *RelayTransferTxnReq) Reset()                    { *m = RelayTransferTxnReq{} }
func (m *RelayTransferTxnReq) String() string            { return proto.CompactTextString(m) }
func (*RelayTransferTxnReq) ProtoMessage()               {}
func (*RelayTransferTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RelayTransferTxnReq) GetAddressesTo() []string {
	if m != nil {
		return m.AddressesTo
	}
	return nil
}

func (m *RelayTransferTxnReq) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *RelayTransferTxnReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelayTransferTxnReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

func (m *RelayTransferTxnReq) GetSignerAddress() string {
	if m != nil {
		return m.SignerAddress
	}
	return ""
}

func (m *RelayTransferTxnReq) GetOtsIndex() uint64 {
	if m != nil {
		return m.OtsIndex
	}
	return 0
}

type RelayTransferTxnBySlaveReq struct {
	AddressesTo   []string `protobuf:"bytes,1,rep,name=addresses_to,json=addressesTo" json:"addresses_to,omitempty"`
	Amounts       []uint64 `protobuf:"varint,2,rep,packed,name=amounts" json:"amounts,omitempty"`
	Fee           uint64   `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string   `protobuf:"bytes,4,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
}

func (m *RelayTransferTxnBySlaveReq) Reset()                    { *m = RelayTransferTxnBySlaveReq{} }
func (m *RelayTransferTxnBySlaveReq) String() string            { return proto.CompactTextString(m) }
func (*RelayTransferTxnBySlaveReq) ProtoMessage()               {}
func (*RelayTransferTxnBySlaveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RelayTransferTxnBySlaveReq) GetAddressesTo() []string {
	if m != nil {
		return m.AddressesTo
	}
	return nil
}

func (m *RelayTransferTxnBySlaveReq) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *RelayTransferTxnBySlaveReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelayTransferTxnBySlaveReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

type RelayMessageTxnReq struct {
	Message       string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Fee           uint64 `protobuf:"varint,2,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string `protobuf:"bytes,3,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
	SignerAddress string `protobuf:"bytes,4,opt,name=signer_address,json=signerAddress" json:"signer_address,omitempty"`
	OtsIndex      uint64 `protobuf:"varint,5,opt,name=ots_index,json=otsIndex" json:"ots_index,omitempty"`
}

func (m *RelayMessageTxnReq) Reset()                    { *m = RelayMessageTxnReq{} }
func (m *RelayMessageTxnReq) String() string            { return proto.CompactTextString(m) }
func (*RelayMessageTxnReq) ProtoMessage()               {}
func (*RelayMessageTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RelayMessageTxnReq) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RelayMessageTxnReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelayMessageTxnReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

func (m *RelayMessageTxnReq) GetSignerAddress() string {
	if m != nil {
		return m.SignerAddress
	}
	return ""
}

func (m *RelayMessageTxnReq) GetOtsIndex() uint64 {
	if m != nil {
		return m.OtsIndex
	}
	return 0
}

type RelayMessageTxnBySlaveReq struct {
	Message       string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Fee           uint64 `protobuf:"varint,2,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string `protobuf:"bytes,3,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
}

func (m *RelayMessageTxnBySlaveReq) Reset()                    { *m = RelayMessageTxnBySlaveReq{} }
func (m *RelayMessageTxnBySlaveReq) String() string            { return proto.CompactTextString(m) }
func (*RelayMessageTxnBySlaveReq) ProtoMessage()               {}
func (*RelayMessageTxnBySlaveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RelayMessageTxnBySlaveReq) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RelayMessageTxnBySlaveReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelayMessageTxnBySlaveReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

type RelayTokenTxnReq struct {
	Symbol        string   `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Owner         string   `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Decimals      uint64   `protobuf:"varint,4,opt,name=decimals" json:"decimals,omitempty"`
	Addresses     []string `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
	Amounts       []uint64 `protobuf:"varint,6,rep,packed,name=amounts" json:"amounts,omitempty"`
	Fee           uint64   `protobuf:"varint,7,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string   `protobuf:"bytes,8,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
	SignerAddress string   `protobuf:"bytes,9,opt,name=signer_address,json=signerAddress" json:"signer_address,omitempty"`
	OtsIndex      uint64   `protobuf:"varint,10,opt,name=ots_index,json=otsIndex" json:"ots_index,omitempty"`
}

func (m *RelayTokenTxnReq) Reset()                    { *m = RelayTokenTxnReq{} }
func (m *RelayTokenTxnReq) String() string            { return proto.CompactTextString(m) }
func (*RelayTokenTxnReq) ProtoMessage()               {}
func (*RelayTokenTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *RelayTokenTxnReq) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *RelayTokenTxnReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RelayTokenTxnReq) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *RelayTokenTxnReq) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *RelayTokenTxnReq) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *RelayTokenTxnReq) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *RelayTokenTxnReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelayTokenTxnReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

func (m *RelayTokenTxnReq) GetSignerAddress() string {
	if m != nil {
		return m.SignerAddress
	}
	return ""
}

func (m *RelayTokenTxnReq) GetOtsIndex() uint64 {
	if m != nil {
		return m.OtsIndex
	}
	return 0
}

type RelayTokenTxnBySlaveReq struct {
	Symbol        string   `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Owner         string   `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Decimals      uint64   `protobuf:"varint,4,opt,name=decimals" json:"decimals,omitempty"`
	Addresses     []string `protobuf:"bytes,5,rep,name=addresses" json:"addresses,omitempty"`
	Amounts       []uint64 `protobuf:"varint,6,rep,packed,name=amounts" json:"amounts,omitempty"`
	Fee           uint64   `protobuf:"varint,7,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string   `protobuf:"bytes,8,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
}

func (m *RelayTokenTxnBySlaveReq) Reset()                    { *m = RelayTokenTxnBySlaveReq{} }
func (m *RelayTokenTxnBySlaveReq) String() string            { return proto.CompactTextString(m) }
func (*RelayTokenTxnBySlaveReq) ProtoMessage()               {}
func (*RelayTokenTxnBySlaveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *RelayTokenTxnBySlaveReq) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *RelayTokenTxnBySlaveReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RelayTokenTxnBySlaveReq) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *RelayTokenTxnBySlaveReq) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *RelayTokenTxnBySlaveReq) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *RelayTokenTxnBySlaveReq) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *RelayTokenTxnBySlaveReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelayTokenTxnBySlaveReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

type RelayTransferTokenTxnReq struct {
	AddressesTo   []string `protobuf:"bytes,1,rep,name=addresses_to,json=addressesTo" json:"addresses_to,omitempty"`
	TokenTxhash   string   `protobuf:"bytes,2,opt,name=token_txhash,json=tokenTxhash" json:"token_txhash,omitempty"`
	Amounts       []uint64 `protobuf:"varint,3,rep,packed,name=amounts" json:"amounts,omitempty"`
	Fee           uint64   `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string   `protobuf:"bytes,5,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
	SignerAddress string   `protobuf:"bytes,6,opt,name=signer_address,json=signerAddress" json:"signer_address,omitempty"`
	OtsIndex      uint64   `protobuf:"varint,7,opt,name=ots_index,json=otsIndex" json:"ots_index,omitempty"`
}

func (m *RelayTransferTokenTxnReq) Reset()                    { *m = RelayTransferTokenTxnReq{} }
func (m *RelayTransferTokenTxnReq) String() string            { return proto.CompactTextString(m) }
func (*RelayTransferTokenTxnReq) ProtoMessage()               {}
func (*RelayTransferTokenTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *RelayTransferTokenTxnReq) GetAddressesTo() []string {
	if m != nil {
		return m.AddressesTo
	}
	return nil
}

func (m *RelayTransferTokenTxnReq) GetTokenTxhash() string {
	if m != nil {
		return m.TokenTxhash
	}
	return ""
}

func (m *RelayTransferTokenTxnReq) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *RelayTransferTokenTxnReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelayTransferTokenTxnReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

func (m *RelayTransferTokenTxnReq) GetSignerAddress() string {
	if m != nil {
		return m.SignerAddress
	}
	return ""
}

func (m *RelayTransferTokenTxnReq) GetOtsIndex() uint64 {
	if m != nil {
		return m.OtsIndex
	}
	return 0
}

type RelayTransferTokenTxnBySlaveReq struct {
	AddressesTo   []string `protobuf:"bytes,1,rep,name=addresses_to,json=addressesTo" json:"addresses_to,omitempty"`
	TokenTxhash   string   `protobuf:"bytes,2,opt,name=token_txhash,json=tokenTxhash" json:"token_txhash,omitempty"`
	Amounts       []uint64 `protobuf:"varint,3,rep,packed,name=amounts" json:"amounts,omitempty"`
	Fee           uint64   `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string   `protobuf:"bytes,5,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
}

func (m *RelayTransferTokenTxnBySlaveReq) Reset()         { *m = RelayTransferTokenTxnBySlaveReq{} }
func (m *RelayTransferTokenTxnBySlaveReq) String() string { return proto.CompactTextString(m) }
func (*RelayTransferTokenTxnBySlaveReq) ProtoMessage()    {}
func (*RelayTransferTokenTxnBySlaveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28}
}

func (m *RelayTransferTokenTxnBySlaveReq) GetAddressesTo() []string {
	if m != nil {
		return m.AddressesTo
	}
	return nil
}

func (m *RelayTransferTokenTxnBySlaveReq) GetTokenTxhash() string {
	if m != nil {
		return m.TokenTxhash
	}
	return ""
}

func (m *RelayTransferTokenTxnBySlaveReq) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *RelayTransferTokenTxnBySlaveReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelayTransferTokenTxnBySlaveReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

type RelaySlaveTxnReq struct {
	SlavePks      [][]byte `protobuf:"bytes,1,rep,name=slave_pks,json=slavePks,proto3" json:"slave_pks,omitempty"`
	AccessTypes   []uint32 `protobuf:"varint,2,rep,packed,name=access_types,json=accessTypes" json:"access_types,omitempty"`
	Fee           uint64   `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string   `protobuf:"bytes,4,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
	SignerAddress string   `protobuf:"bytes,5,opt,name=signer_address,json=signerAddress" json:"signer_address,omitempty"`
	OtsIndex      uint64   `protobuf:"varint,6,opt,name=ots_index,json=otsIndex" json:"ots_index,omitempty"`
}

func (m *RelaySlaveTxnReq) Reset()                    { *m = RelaySlaveTxnReq{} }
func (m *RelaySlaveTxnReq) String() string            { return proto.CompactTextString(m) }
func (*RelaySlaveTxnReq) ProtoMessage()               {}
func (*RelaySlaveTxnReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *RelaySlaveTxnReq) GetSlavePks() [][]byte {
	if m != nil {
		return m.SlavePks
	}
	return nil
}

func (m *RelaySlaveTxnReq) GetAccessTypes() []uint32 {
	if m != nil {
		return m.AccessTypes
	}
	return nil
}

func (m *RelaySlaveTxnReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelaySlaveTxnReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

func (m *RelaySlaveTxnReq) GetSignerAddress() string {
	if m != nil {
		return m.SignerAddress
	}
	return ""
}

func (m *RelaySlaveTxnReq) GetOtsIndex() uint64 {
	if m != nil {
		return m.OtsIndex
	}
	return 0
}

type RelaySlaveTxnBySlaveReq struct {
	SlavePks      [][]byte `protobuf:"bytes,1,rep,name=slave_pks,json=slavePks,proto3" json:"slave_pks,omitempty"`
	AccessTypes   []uint32 `protobuf:"varint,2,rep,packed,name=access_types,json=accessTypes" json:"access_types,omitempty"`
	Fee           uint64   `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	MasterAddress string   `protobuf:"bytes,4,opt,name=master_address,json=masterAddress" json:"master_address,omitempty"`
}

func (m *RelaySlaveTxnBySlaveReq) Reset()                    { *m = RelaySlaveTxnBySlaveReq{} }
func (m *RelaySlaveTxnBySlaveReq) String() string            { return proto.CompactTextString(m) }
func (*RelaySlaveTxnBySlaveReq) ProtoMessage()               {}
func (*RelaySlaveTxnBySlaveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *RelaySlaveTxnBySlaveReq) GetSlavePks() [][]byte {
	if m != nil {
		return m.SlavePks
	}
	return nil
}

func (m *RelaySlaveTxnBySlaveReq) GetAccessTypes() []uint32 {
	if m != nil {
		return m.AccessTypes
	}
	return nil
}

func (m *RelaySlaveTxnBySlaveReq) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *RelaySlaveTxnBySlaveReq) GetMasterAddress() string {
	if m != nil {
		return m.MasterAddress
	}
	return ""
}

type RelayTxnResp struct {
	Code  uint32            `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error string            `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Tx    *PlainTransaction `protobuf:"bytes,3,opt,name=tx" json:"tx,omitempty"`
}

func (m *RelayTxnResp) Reset()                    { *m = RelayTxnResp{} }
func (m *RelayTxnResp) String() string            { return proto.CompactTextString(m) }
func (*RelayTxnResp) ProtoMessage()               {}
func (*RelayTxnResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *RelayTxnResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RelayTxnResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RelayTxnResp) GetTx() *PlainTransaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type ChangePassphraseReq struct {
	OldPassphrase string `protobuf:"bytes,1,opt,name=oldPassphrase" json:"oldPassphrase,omitempty"`
	NewPassphrase string `protobuf:"bytes,2,opt,name=newPassphrase" json:"newPassphrase,omitempty"`
}

func (m *ChangePassphraseReq) Reset()                    { *m = ChangePassphraseReq{} }
func (m *ChangePassphraseReq) String() string            { return proto.CompactTextString(m) }
func (*ChangePassphraseReq) ProtoMessage()               {}
func (*ChangePassphraseReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ChangePassphraseReq) GetOldPassphrase() string {
	if m != nil {
		return m.OldPassphrase
	}
	return ""
}

func (m *ChangePassphraseReq) GetNewPassphrase() string {
	if m != nil {
		return m.NewPassphrase
	}
	return ""
}

type ChangePassphraseResp struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *ChangePassphraseResp) Reset()                    { *m = ChangePassphraseResp{} }
func (m *ChangePassphraseResp) String() string            { return proto.CompactTextString(m) }
func (*ChangePassphraseResp) ProtoMessage()               {}
func (*ChangePassphraseResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ChangePassphraseResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ChangePassphraseResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type TransactionsByAddressReq struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *TransactionsByAddressReq) Reset()                    { *m = TransactionsByAddressReq{} }
func (m *TransactionsByAddressReq) String() string            { return proto.CompactTextString(m) }
func (*TransactionsByAddressReq) ProtoMessage()               {}
func (*TransactionsByAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *TransactionsByAddressReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type TransactionsByAddressResp struct {
	Code             uint32                  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error            string                  `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	MiniTransactions []*qrl1.MiniTransaction `protobuf:"bytes,3,rep,name=mini_transactions,json=miniTransactions" json:"mini_transactions,omitempty"`
	Balance          uint64                  `protobuf:"varint,4,opt,name=balance" json:"balance,omitempty"`
}

func (m *TransactionsByAddressResp) Reset()                    { *m = TransactionsByAddressResp{} }
func (m *TransactionsByAddressResp) String() string            { return proto.CompactTextString(m) }
func (*TransactionsByAddressResp) ProtoMessage()               {}
func (*TransactionsByAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *TransactionsByAddressResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TransactionsByAddressResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TransactionsByAddressResp) GetMiniTransactions() []*qrl1.MiniTransaction {
	if m != nil {
		return m.MiniTransactions
	}
	return nil
}

func (m *TransactionsByAddressResp) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type TransactionReq struct {
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash" json:"tx_hash,omitempty"`
}

func (m *TransactionReq) Reset()                    { *m = TransactionReq{} }
func (m *TransactionReq) String() string            { return proto.CompactTextString(m) }
func (*TransactionReq) ProtoMessage()               {}
func (*TransactionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *TransactionReq) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type TransactionResp struct {
	Code            uint32            `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error           string            `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Tx              *PlainTransaction `protobuf:"bytes,3,opt,name=tx" json:"tx,omitempty"`
	Confirmations   string            `protobuf:"bytes,4,opt,name=confirmations" json:"confirmations,omitempty"`
	BlockNumber     uint64            `protobuf:"varint,5,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	BlockHeaderHash string            `protobuf:"bytes,6,opt,name=block_header_hash,json=blockHeaderHash" json:"block_header_hash,omitempty"`
}

func (m *TransactionResp) Reset()                    { *m = TransactionResp{} }
func (m *TransactionResp) String() string            { return proto.CompactTextString(m) }
func (*TransactionResp) ProtoMessage()               {}
func (*TransactionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *TransactionResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TransactionResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TransactionResp) GetTx() *PlainTransaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *TransactionResp) GetConfirmations() string {
	if m != nil {
		return m.Confirmations
	}
	return ""
}

func (m *TransactionResp) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *TransactionResp) GetBlockHeaderHash() string {
	if m != nil {
		return m.BlockHeaderHash
	}
	return ""
}

type BalanceReq struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *BalanceReq) Reset()                    { *m = BalanceReq{} }
func (m *BalanceReq) String() string            { return proto.CompactTextString(m) }
func (*BalanceReq) ProtoMessage()               {}
func (*BalanceReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *BalanceReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type BalanceResp struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Balance string `protobuf:"bytes,3,opt,name=balance" json:"balance,omitempty"`
}

func (m *BalanceResp) Reset()                    { *m = BalanceResp{} }
func (m *BalanceResp) String() string            { return proto.CompactTextString(m) }
func (*BalanceResp) ProtoMessage()               {}
func (*BalanceResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *BalanceResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BalanceResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *BalanceResp) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

type OTSReq struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *OTSReq) Reset()                    { *m = OTSReq{} }
func (m *OTSReq) String() string            { return proto.CompactTextString(m) }
func (*OTSReq) ProtoMessage()               {}
func (*OTSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *OTSReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type OTSResp struct {
	Code               uint32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error              string   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	OtsBitfield        [][]byte `protobuf:"bytes,3,rep,name=ots_bitfield,json=otsBitfield,proto3" json:"ots_bitfield,omitempty"`
	NextUnusedOtsIndex uint64   `protobuf:"varint,4,opt,name=next_unused_ots_index,json=nextUnusedOtsIndex" json:"next_unused_ots_index,omitempty"`
}

func (m *OTSResp) Reset()                    { *m = OTSResp{} }
func (m *OTSResp) String() string            { return proto.CompactTextString(m) }
func (*OTSResp) ProtoMessage()               {}
func (*OTSResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *OTSResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OTSResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *OTSResp) GetOtsBitfield() [][]byte {
	if m != nil {
		return m.OtsBitfield
	}
	return nil
}

func (m *OTSResp) GetNextUnusedOtsIndex() uint64 {
	if m != nil {
		return m.NextUnusedOtsIndex
	}
	return 0
}

type HeightReq struct {
}

func (m *HeightReq) Reset()                    { *m = HeightReq{} }
func (m *HeightReq) String() string            { return proto.CompactTextString(m) }
func (*HeightReq) ProtoMessage()               {}
func (*HeightReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type HeightResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Height uint64 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (m *HeightResp) Reset()                    { *m = HeightResp{} }
func (m *HeightResp) String() string            { return proto.CompactTextString(m) }
func (*HeightResp) ProtoMessage()               {}
func (*HeightResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *HeightResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HeightResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *HeightResp) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type BlockReq struct {
	HeaderHash string `protobuf:"bytes,1,opt,name=header_hash,json=headerHash" json:"header_hash,omitempty"`
}

func (m *BlockReq) Reset()                    { *m = BlockReq{} }
func (m *BlockReq) String() string            { return proto.CompactTextString(m) }
func (*BlockReq) ProtoMessage()               {}
func (*BlockReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *BlockReq) GetHeaderHash() string {
	if m != nil {
		return m.HeaderHash
	}
	return ""
}

type BlockResp struct {
	Code  uint32      `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error string      `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Block *PlainBlock `protobuf:"bytes,3,opt,name=block" json:"block,omitempty"`
}

func (m *BlockResp) Reset()                    { *m = BlockResp{} }
func (m *BlockResp) String() string            { return proto.CompactTextString(m) }
func (*BlockResp) ProtoMessage()               {}
func (*BlockResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *BlockResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BlockResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *BlockResp) GetBlock() *PlainBlock {
	if m != nil {
		return m.Block
	}
	return nil
}

type BlockByNumberReq struct {
	BlockNumber uint64 `protobuf:"varint,1,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
}

func (m *BlockByNumberReq) Reset()                    { *m = BlockByNumberReq{} }
func (m *BlockByNumberReq) String() string            { return proto.CompactTextString(m) }
func (*BlockByNumberReq) ProtoMessage()               {}
func (*BlockByNumberReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *BlockByNumberReq) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type AddressFromPKReq struct {
	Pk string `protobuf:"bytes,1,opt,name=pk" json:"pk,omitempty"`
}

func (m *AddressFromPKReq) Reset()                    { *m = AddressFromPKReq{} }
func (m *AddressFromPKReq) String() string            { return proto.CompactTextString(m) }
func (*AddressFromPKReq) ProtoMessage()               {}
func (*AddressFromPKReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *AddressFromPKReq) GetPk() string {
	if m != nil {
		return m.Pk
	}
	return ""
}

type AddressFromPKResp struct {
	Code    uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *AddressFromPKResp) Reset()                    { *m = AddressFromPKResp{} }
func (m *AddressFromPKResp) String() string            { return proto.CompactTextString(m) }
func (*AddressFromPKResp) ProtoMessage()               {}
func (*AddressFromPKResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *AddressFromPKResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AddressFromPKResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *AddressFromPKResp) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type NodeInfoReq struct {
}

func (m *NodeInfoReq) Reset()                    { *m = NodeInfoReq{} }
func (m *NodeInfoReq) String() string            { return proto.CompactTextString(m) }
func (*NodeInfoReq) ProtoMessage()               {}
func (*NodeInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

type NodeInfoResp struct {
	Code           uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Error          string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Version        string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	NumConnections string `protobuf:"bytes,4,opt,name=num_connections,json=numConnections" json:"num_connections,omitempty"`
	NumKnownPeers  string `protobuf:"bytes,5,opt,name=num_known_peers,json=numKnownPeers" json:"num_known_peers,omitempty"`
	Uptime         uint64 `protobuf:"varint,6,opt,name=uptime" json:"uptime,omitempty"`
	BlockHeight    uint64 `protobuf:"varint,7,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	BlockLastHash  string `protobuf:"bytes,8,opt,name=block_last_hash,json=blockLastHash" json:"block_last_hash,omitempty"`
	NetworkId      string `protobuf:"bytes,9,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
}

func (m *NodeInfoResp) Reset()                    { *m = NodeInfoResp{} }
func (m *NodeInfoResp) String() string            { return proto.CompactTextString(m) }
func (*NodeInfoResp) ProtoMessage()               {}
func (*NodeInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *NodeInfoResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NodeInfoResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *NodeInfoResp) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *NodeInfoResp) GetNumConnections() string {
	if m != nil {
		return m.NumConnections
	}
	return ""
}

func (m *NodeInfoResp) GetNumKnownPeers() string {
	if m != nil {
		return m.NumKnownPeers
	}
	return ""
}

func (m *NodeInfoResp) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *NodeInfoResp) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *NodeInfoResp) GetBlockLastHash() string {
	if m != nil {
		return m.BlockLastHash
	}
	return ""
}

func (m *NodeInfoResp) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

type PlainGenesisBalance struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Balance uint64 `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
}

func (m *PlainGenesisBalance) Reset()                    { *m = PlainGenesisBalance{} }
func (m *PlainGenesisBalance) String() string            { return proto.CompactTextString(m) }
func (*PlainGenesisBalance) ProtoMessage()               {}
func (*PlainGenesisBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *PlainGenesisBalance) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PlainGenesisBalance) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type PlainAddressAmount struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Amount  uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *PlainAddressAmount) Reset()                    { *m = PlainAddressAmount{} }
func (m *PlainAddressAmount) String() string            { return proto.CompactTextString(m) }
func (*PlainAddressAmount) ProtoMessage()               {}
func (*PlainAddressAmount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *PlainAddressAmount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PlainAddressAmount) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type PlainTransaction struct {
	MasterAddr      string `protobuf:"bytes,1,opt,name=master_addr,json=masterAddr" json:"master_addr,omitempty"`
	Fee             uint64 `protobuf:"varint,2,opt,name=fee" json:"fee,omitempty"`
	PublicKey       string `protobuf:"bytes,3,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
	Signature       string `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
	Nonce           uint64 `protobuf:"varint,5,opt,name=nonce" json:"nonce,omitempty"`
	TransactionHash string `protobuf:"bytes,6,opt,name=transaction_hash,json=transactionHash" json:"transaction_hash,omitempty"`
	SignerAddr      string `protobuf:"bytes,7,opt,name=signer_addr,json=signerAddr" json:"signer_addr,omitempty"`
	// Types that are valid to be assigned to TransactionType:
	//	*PlainTransaction_Transfer_
	//	*PlainTransaction_Coinbase
	//	*PlainTransaction_LatticePK
	//	*PlainTransaction_Message_
	//	*PlainTransaction_Token_
	//	*PlainTransaction_TransferToken_
	//	*PlainTransaction_Slave_
	TransactionType isPlainTransaction_TransactionType `protobuf_oneof:"transactionType"`
}

func (m *PlainTransaction) Reset()                    { *m = PlainTransaction{} }
func (m *PlainTransaction) String() string            { return proto.CompactTextString(m) }
func (*PlainTransaction) ProtoMessage()               {}
func (*PlainTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

type isPlainTransaction_TransactionType interface {
	isPlainTransaction_TransactionType()
}

type PlainTransaction_Transfer_ struct {
	Transfer *PlainTransaction_Transfer `protobuf:"bytes,8,opt,name=transfer,oneof"`
}
type PlainTransaction_Coinbase struct {
	Coinbase *PlainTransaction_CoinBase `protobuf:"bytes,9,opt,name=coinbase,oneof"`
}
type PlainTransaction_LatticePK struct {
	LatticePK *PlainTransaction_LatticePublicKey `protobuf:"bytes,10,opt,name=latticePK,oneof"`
}
type PlainTransaction_Message_ struct {
	Message *PlainTransaction_Message `protobuf:"bytes,11,opt,name=message,oneof"`
}
type PlainTransaction_Token_ struct {
	Token *PlainTransaction_Token `protobuf:"bytes,12,opt,name=token,oneof"`
}
type PlainTransaction_TransferToken_ struct {
	TransferToken *PlainTransaction_TransferToken `protobuf:"bytes,13,opt,name=transfer_token,json=transferToken,oneof"`
}
type PlainTransaction_Slave_ struct {
	Slave *PlainTransaction_Slave `protobuf:"bytes,14,opt,name=slave,oneof"`
}

func (*PlainTransaction_Transfer_) isPlainTransaction_TransactionType()      {}
func (*PlainTransaction_Coinbase) isPlainTransaction_TransactionType()       {}
func (*PlainTransaction_LatticePK) isPlainTransaction_TransactionType()      {}
func (*PlainTransaction_Message_) isPlainTransaction_TransactionType()       {}
func (*PlainTransaction_Token_) isPlainTransaction_TransactionType()         {}
func (*PlainTransaction_TransferToken_) isPlainTransaction_TransactionType() {}
func (*PlainTransaction_Slave_) isPlainTransaction_TransactionType()         {}

func (m *PlainTransaction) GetTransactionType() isPlainTransaction_TransactionType {
	if m != nil {
		return m.TransactionType
	}
	return nil
}

func (m *PlainTransaction) GetMasterAddr() string {
	if m != nil {
		return m.MasterAddr
	}
	return ""
}

func (m *PlainTransaction) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *PlainTransaction) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *PlainTransaction) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *PlainTransaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *PlainTransaction) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *PlainTransaction) GetSignerAddr() string {
	if m != nil {
		return m.SignerAddr
	}
	return ""
}

func (m *PlainTransaction) GetTransfer() *PlainTransaction_Transfer {
	if x, ok := m.GetTransactionType().(*PlainTransaction_Transfer_); ok {
		return x.Transfer
	}
	return nil
}

func (m *PlainTransaction) GetCoinbase() *PlainTransaction_CoinBase {
	if x, ok := m.GetTransactionType().(*PlainTransaction_Coinbase); ok {
		return x.Coinbase
	}
	return nil
}

func (m *PlainTransaction) GetLatticePK() *PlainTransaction_LatticePublicKey {
	if x, ok := m.GetTransactionType().(*PlainTransaction_LatticePK); ok {
		return x.LatticePK
	}
	return nil
}

func (m *PlainTransaction) GetMessage() *PlainTransaction_Message {
	if x, ok := m.GetTransactionType().(*PlainTransaction_Message_); ok {
		return x.Message
	}
	return nil
}

func (m *PlainTransaction) GetToken() *PlainTransaction_Token {
	if x, ok := m.GetTransactionType().(*PlainTransaction_Token_); ok {
		return x.Token
	}
	return nil
}

func (m *PlainTransaction) GetTransferToken() *PlainTransaction_TransferToken {
	if x, ok := m.GetTransactionType().(*PlainTransaction_TransferToken_); ok {
		return x.TransferToken
	}
	return nil
}

func (m *PlainTransaction) GetSlave() *PlainTransaction_Slave {
	if x, ok := m.GetTransactionType().(*PlainTransaction_Slave_); ok {
		return x.Slave
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PlainTransaction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PlainTransaction_OneofMarshaler, _PlainTransaction_OneofUnmarshaler, _PlainTransaction_OneofSizer, []interface{}{
		(*PlainTransaction_Transfer_)(nil),
		(*PlainTransaction_Coinbase)(nil),
		(*PlainTransaction_LatticePK)(nil),
		(*PlainTransaction_Message_)(nil),
		(*PlainTransaction_Token_)(nil),
		(*PlainTransaction_TransferToken_)(nil),
		(*PlainTransaction_Slave_)(nil),
	}
}

func _PlainTransaction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PlainTransaction)
	// transactionType
	switch x := m.TransactionType.(type) {
	case *PlainTransaction_Transfer_:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transfer); err != nil {
			return err
		}
	case *PlainTransaction_Coinbase:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Coinbase); err != nil {
			return err
		}
	case *PlainTransaction_LatticePK:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LatticePK); err != nil {
			return err
		}
	case *PlainTransaction_Message_:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *PlainTransaction_Token_:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Token); err != nil {
			return err
		}
	case *PlainTransaction_TransferToken_:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransferToken); err != nil {
			return err
		}
	case *PlainTransaction_Slave_:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Slave); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PlainTransaction.TransactionType has unexpected type %T", x)
	}
	return nil
}

func _PlainTransaction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PlainTransaction)
	switch tag {
	case 8: // transactionType.transfer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlainTransaction_Transfer)
		err := b.DecodeMessage(msg)
		m.TransactionType = &PlainTransaction_Transfer_{msg}
		return true, err
	case 9: // transactionType.coinbase
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlainTransaction_CoinBase)
		err := b.DecodeMessage(msg)
		m.TransactionType = &PlainTransaction_Coinbase{msg}
		return true, err
	case 10: // transactionType.latticePK
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlainTransaction_LatticePublicKey)
		err := b.DecodeMessage(msg)
		m.TransactionType = &PlainTransaction_LatticePK{msg}
		return true, err
	case 11: // transactionType.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlainTransaction_Message)
		err := b.DecodeMessage(msg)
		m.TransactionType = &PlainTransaction_Message_{msg}
		return true, err
	case 12: // transactionType.token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlainTransaction_Token)
		err := b.DecodeMessage(msg)
		m.TransactionType = &PlainTransaction_Token_{msg}
		return true, err
	case 13: // transactionType.transfer_token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlainTransaction_TransferToken)
		err := b.DecodeMessage(msg)
		m.TransactionType = &PlainTransaction_TransferToken_{msg}
		return true, err
	case 14: // transactionType.slave
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlainTransaction_Slave)
		err := b.DecodeMessage(msg)
		m.TransactionType = &PlainTransaction_Slave_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PlainTransaction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PlainTransaction)
	// transactionType
	switch x := m.TransactionType.(type) {
	case *PlainTransaction_Transfer_:
		s := proto.Size(x.Transfer)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlainTransaction_Coinbase:
		s := proto.Size(x.Coinbase)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlainTransaction_LatticePK:
		s := proto.Size(x.LatticePK)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlainTransaction_Message_:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlainTransaction_Token_:
		s := proto.Size(x.Token)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlainTransaction_TransferToken_:
		s := proto.Size(x.TransferToken)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlainTransaction_Slave_:
		s := proto.Size(x.Slave)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ////////
type PlainTransaction_Transfer struct {
	AddrsTo []string `protobuf:"bytes,1,rep,name=addrs_to,json=addrsTo" json:"addrs_to,omitempty"`
	Amounts []uint64 `protobuf:"varint,2,rep,packed,name=amounts" json:"amounts,omitempty"`
}

func (m *PlainTransaction_Transfer) Reset()                    { *m = PlainTransaction_Transfer{} }
func (m *PlainTransaction_Transfer) String() string            { return proto.CompactTextString(m) }
func (*PlainTransaction_Transfer) ProtoMessage()               {}
func (*PlainTransaction_Transfer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53, 0} }

func (m *PlainTransaction_Transfer) GetAddrsTo() []string {
	if m != nil {
		return m.AddrsTo
	}
	return nil
}

func (m *PlainTransaction_Transfer) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type PlainTransaction_CoinBase struct {
	AddrTo string `protobuf:"bytes,1,opt,name=addr_to,json=addrTo" json:"addr_to,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *PlainTransaction_CoinBase) Reset()                    { *m = PlainTransaction_CoinBase{} }
func (m *PlainTransaction_CoinBase) String() string            { return proto.CompactTextString(m) }
func (*PlainTransaction_CoinBase) ProtoMessage()               {}
func (*PlainTransaction_CoinBase) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53, 1} }

func (m *PlainTransaction_CoinBase) GetAddrTo() string {
	if m != nil {
		return m.AddrTo
	}
	return ""
}

func (m *PlainTransaction_CoinBase) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type PlainTransaction_LatticePublicKey struct {
	KyberPk     string `protobuf:"bytes,1,opt,name=kyber_pk,json=kyberPk" json:"kyber_pk,omitempty"`
	DilithiumPk string `protobuf:"bytes,2,opt,name=dilithium_pk,json=dilithiumPk" json:"dilithium_pk,omitempty"`
}

func (m *PlainTransaction_LatticePublicKey) Reset()         { *m = PlainTransaction_LatticePublicKey{} }
func (m *PlainTransaction_LatticePublicKey) String() string { return proto.CompactTextString(m) }
func (*PlainTransaction_LatticePublicKey) ProtoMessage()    {}
func (*PlainTransaction_LatticePublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{53, 2}
}

func (m *PlainTransaction_LatticePublicKey) GetKyberPk() string {
	if m != nil {
		return m.KyberPk
	}
	return ""
}

func (m *PlainTransaction_LatticePublicKey) GetDilithiumPk() string {
	if m != nil {
		return m.DilithiumPk
	}
	return ""
}

type PlainTransaction_Message struct {
	MessageHash string `protobuf:"bytes,1,opt,name=message_hash,json=messageHash" json:"message_hash,omitempty"`
}

func (m *PlainTransaction_Message) Reset()                    { *m = PlainTransaction_Message{} }
func (m *PlainTransaction_Message) String() string            { return proto.CompactTextString(m) }
func (*PlainTransaction_Message) ProtoMessage()               {}
func (*PlainTransaction_Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53, 3} }

func (m *PlainTransaction_Message) GetMessageHash() string {
	if m != nil {
		return m.MessageHash
	}
	return ""
}

type PlainTransaction_Token struct {
	Symbol          string                `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Name            string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Owner           string                `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	Decimals        uint64                `protobuf:"varint,4,opt,name=decimals" json:"decimals,omitempty"`
	InitialBalances []*PlainAddressAmount `protobuf:"bytes,5,rep,name=initial_balances,json=initialBalances" json:"initial_balances,omitempty"`
}

func (m *PlainTransaction_Token) Reset()                    { *m = PlainTransaction_Token{} }
func (m *PlainTransaction_Token) String() string            { return proto.CompactTextString(m) }
func (*PlainTransaction_Token) ProtoMessage()               {}
func (*PlainTransaction_Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53, 4} }

func (m *PlainTransaction_Token) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *PlainTransaction_Token) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlainTransaction_Token) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PlainTransaction_Token) GetDecimals() uint64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *PlainTransaction_Token) GetInitialBalances() []*PlainAddressAmount {
	if m != nil {
		return m.InitialBalances
	}
	return nil
}

type PlainTransaction_TransferToken struct {
	TokenTxhash string   `protobuf:"bytes,1,opt,name=token_txhash,json=tokenTxhash" json:"token_txhash,omitempty"`
	AddrsTo     []string `protobuf:"bytes,2,rep,name=addrs_to,json=addrsTo" json:"addrs_to,omitempty"`
	Amounts     []uint64 `protobuf:"varint,3,rep,packed,name=amounts" json:"amounts,omitempty"`
}

func (m *PlainTransaction_TransferToken) Reset()         { *m = PlainTransaction_TransferToken{} }
func (m *PlainTransaction_TransferToken) String() string { return proto.CompactTextString(m) }
func (*PlainTransaction_TransferToken) ProtoMessage()    {}
func (*PlainTransaction_TransferToken) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{53, 5}
}

func (m *PlainTransaction_TransferToken) GetTokenTxhash() string {
	if m != nil {
		return m.TokenTxhash
	}
	return ""
}

func (m *PlainTransaction_TransferToken) GetAddrsTo() []string {
	if m != nil {
		return m.AddrsTo
	}
	return nil
}

func (m *PlainTransaction_TransferToken) GetAmounts() []uint64 {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type PlainTransaction_Slave struct {
	SlavePks    []string `protobuf:"bytes,1,rep,name=slave_pks,json=slavePks" json:"slave_pks,omitempty"`
	AccessTypes []uint32 `protobuf:"varint,2,rep,packed,name=access_types,json=accessTypes" json:"access_types,omitempty"`
}

func (m *PlainTransaction_Slave) Reset()                    { *m = PlainTransaction_Slave{} }
func (m *PlainTransaction_Slave) String() string            { return proto.CompactTextString(m) }
func (*PlainTransaction_Slave) ProtoMessage()               {}
func (*PlainTransaction_Slave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53, 6} }

func (m *PlainTransaction_Slave) GetSlavePks() []string {
	if m != nil {
		return m.SlavePks
	}
	return nil
}

func (m *PlainTransaction_Slave) GetAccessTypes() []uint32 {
	if m != nil {
		return m.AccessTypes
	}
	return nil
}

type PlainBlockHeader struct {
	// Header
	HashHeader       string `protobuf:"bytes,1,opt,name=hash_header,json=hashHeader" json:"hash_header,omitempty"`
	BlockNumber      uint64 `protobuf:"varint,2,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	TimestampSeconds uint64 `protobuf:"varint,3,opt,name=timestamp_seconds,json=timestampSeconds" json:"timestamp_seconds,omitempty"`
	HashHeaderPrev   string `protobuf:"bytes,4,opt,name=hash_header_prev,json=hashHeaderPrev" json:"hash_header_prev,omitempty"`
	RewardBlock      uint64 `protobuf:"varint,5,opt,name=reward_block,json=rewardBlock" json:"reward_block,omitempty"`
	RewardFee        uint64 `protobuf:"varint,6,opt,name=reward_fee,json=rewardFee" json:"reward_fee,omitempty"`
	MerkleRoot       string `protobuf:"bytes,7,opt,name=merkle_root,json=merkleRoot" json:"merkle_root,omitempty"`
	MiningNonce      uint32 `protobuf:"varint,8,opt,name=mining_nonce,json=miningNonce" json:"mining_nonce,omitempty"`
	ExtraNonce       uint64 `protobuf:"varint,9,opt,name=extra_nonce,json=extraNonce" json:"extra_nonce,omitempty"`
}

func (m *PlainBlockHeader) Reset()                    { *m = PlainBlockHeader{} }
func (m *PlainBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*PlainBlockHeader) ProtoMessage()               {}
func (*PlainBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *PlainBlockHeader) GetHashHeader() string {
	if m != nil {
		return m.HashHeader
	}
	return ""
}

func (m *PlainBlockHeader) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *PlainBlockHeader) GetTimestampSeconds() uint64 {
	if m != nil {
		return m.TimestampSeconds
	}
	return 0
}

func (m *PlainBlockHeader) GetHashHeaderPrev() string {
	if m != nil {
		return m.HashHeaderPrev
	}
	return ""
}

func (m *PlainBlockHeader) GetRewardBlock() uint64 {
	if m != nil {
		return m.RewardBlock
	}
	return 0
}

func (m *PlainBlockHeader) GetRewardFee() uint64 {
	if m != nil {
		return m.RewardFee
	}
	return 0
}

func (m *PlainBlockHeader) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *PlainBlockHeader) GetMiningNonce() uint32 {
	if m != nil {
		return m.MiningNonce
	}
	return 0
}

func (m *PlainBlockHeader) GetExtraNonce() uint64 {
	if m != nil {
		return m.ExtraNonce
	}
	return 0
}

type PlainBlock struct {
	Header         *PlainBlockHeader      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Transactions   []*PlainTransaction    `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	GenesisBalance []*PlainGenesisBalance `protobuf:"bytes,3,rep,name=genesis_balance,json=genesisBalance" json:"genesis_balance,omitempty"`
}

func (m *PlainBlock) Reset()                    { *m = PlainBlock{} }
func (m *PlainBlock) String() string            { return proto.CompactTextString(m) }
func (*PlainBlock) ProtoMessage()               {}
func (*PlainBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *PlainBlock) GetHeader() *PlainBlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PlainBlock) GetTransactions() []*PlainTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *PlainBlock) GetGenesisBalance() []*PlainGenesisBalance {
	if m != nil {
		return m.GenesisBalance
	}
	return nil
}

func init() {
	proto.RegisterType((*AddNewAddressReq)(nil), "qrl.AddNewAddressReq")
	proto.RegisterType((*AddNewAddressResp)(nil), "qrl.AddNewAddressResp")
	proto.RegisterType((*AddNewAddressWithSlavesReq)(nil), "qrl.AddNewAddressWithSlavesReq")
	proto.RegisterType((*AddAddressFromSeedReq)(nil), "qrl.AddAddressFromSeedReq")
	proto.RegisterType((*AddAddressFromSeedResp)(nil), "qrl.AddAddressFromSeedResp")
	proto.RegisterType((*ListAddressesReq)(nil), "qrl.ListAddressesReq")
	proto.RegisterType((*ListAddressesResp)(nil), "qrl.ListAddressesResp")
	proto.RegisterType((*RemoveAddressReq)(nil), "qrl.RemoveAddressReq")
	proto.RegisterType((*RemoveAddressResp)(nil), "qrl.RemoveAddressResp")
	proto.RegisterType((*ValidAddressReq)(nil), "qrl.ValidAddressReq")
	proto.RegisterType((*ValidAddressResp)(nil), "qrl.ValidAddressResp")
	proto.RegisterType((*EncryptWalletReq)(nil), "qrl.EncryptWalletReq")
	proto.RegisterType((*EncryptWalletResp)(nil), "qrl.EncryptWalletResp")
	proto.RegisterType((*UnlockWalletReq)(nil), "qrl.UnlockWalletReq")
	proto.RegisterType((*UnlockWalletResp)(nil), "qrl.UnlockWalletResp")
	proto.RegisterType((*LockWalletReq)(nil), "qrl.LockWalletReq")
	proto.RegisterType((*LockWalletResp)(nil), "qrl.LockWalletResp")
	proto.RegisterType((*GetRecoverySeedsReq)(nil), "qrl.GetRecoverySeedsReq")
	proto.RegisterType((*GetRecoverySeedsResp)(nil), "qrl.GetRecoverySeedsResp")
	proto.RegisterType((*GetWalletInfoReq)(nil), "qrl.GetWalletInfoReq")
	proto.RegisterType((*GetWalletInfoResp)(nil), "qrl.GetWalletInfoResp")
	proto.RegisterType((*RelayTransferTxnReq)(nil), "qrl.RelayTransferTxnReq")
	proto.RegisterType((*RelayTransferTxnBySlaveReq)(nil), "qrl.RelayTransferTxnBySlaveReq")
	proto.RegisterType((*RelayMessageTxnReq)(nil), "qrl.RelayMessageTxnReq")
	proto.RegisterType((*RelayMessageTxnBySlaveReq)(nil), "qrl.RelayMessageTxnBySlaveReq")
	proto.RegisterType((*RelayTokenTxnReq)(nil), "qrl.RelayTokenTxnReq")
	proto.RegisterType((*RelayTokenTxnBySlaveReq)(nil), "qrl.RelayTokenTxnBySlaveReq")
	proto.RegisterType((*RelayTransferTokenTxnReq)(nil), "qrl.RelayTransferTokenTxnReq")
	proto.RegisterType((*RelayTransferTokenTxnBySlaveReq)(nil), "qrl.RelayTransferTokenTxnBySlaveReq")
	proto.RegisterType((*RelaySlaveTxnReq)(nil), "qrl.RelaySlaveTxnReq")
	proto.RegisterType((*RelaySlaveTxnBySlaveReq)(nil), "qrl.RelaySlaveTxnBySlaveReq")
	proto.RegisterType((*RelayTxnResp)(nil), "qrl.RelayTxnResp")
	proto.RegisterType((*ChangePassphraseReq)(nil), "qrl.ChangePassphraseReq")
	proto.RegisterType((*ChangePassphraseResp)(nil), "qrl.ChangePassphraseResp")
	proto.RegisterType((*TransactionsByAddressReq)(nil), "qrl.TransactionsByAddressReq")
	proto.RegisterType((*TransactionsByAddressResp)(nil), "qrl.TransactionsByAddressResp")
	proto.RegisterType((*TransactionReq)(nil), "qrl.TransactionReq")
	proto.RegisterType((*TransactionResp)(nil), "qrl.TransactionResp")
	proto.RegisterType((*BalanceReq)(nil), "qrl.BalanceReq")
	proto.RegisterType((*BalanceResp)(nil), "qrl.BalanceResp")
	proto.RegisterType((*OTSReq)(nil), "qrl.OTSReq")
	proto.RegisterType((*OTSResp)(nil), "qrl.OTSResp")
	proto.RegisterType((*HeightReq)(nil), "qrl.HeightReq")
	proto.RegisterType((*HeightResp)(nil), "qrl.HeightResp")
	proto.RegisterType((*BlockReq)(nil), "qrl.BlockReq")
	proto.RegisterType((*BlockResp)(nil), "qrl.BlockResp")
	proto.RegisterType((*BlockByNumberReq)(nil), "qrl.BlockByNumberReq")
	proto.RegisterType((*AddressFromPKReq)(nil), "qrl.AddressFromPKReq")
	proto.RegisterType((*AddressFromPKResp)(nil), "qrl.AddressFromPKResp")
	proto.RegisterType((*NodeInfoReq)(nil), "qrl.NodeInfoReq")
	proto.RegisterType((*NodeInfoResp)(nil), "qrl.NodeInfoResp")
	proto.RegisterType((*PlainGenesisBalance)(nil), "qrl.PlainGenesisBalance")
	proto.RegisterType((*PlainAddressAmount)(nil), "qrl.PlainAddressAmount")
	proto.RegisterType((*PlainTransaction)(nil), "qrl.PlainTransaction")
	proto.RegisterType((*PlainTransaction_Transfer)(nil), "qrl.PlainTransaction.Transfer")
	proto.RegisterType((*PlainTransaction_CoinBase)(nil), "qrl.PlainTransaction.CoinBase")
	proto.RegisterType((*PlainTransaction_LatticePublicKey)(nil), "qrl.PlainTransaction.LatticePublicKey")
	proto.RegisterType((*PlainTransaction_Message)(nil), "qrl.PlainTransaction.Message")
	proto.RegisterType((*PlainTransaction_Token)(nil), "qrl.PlainTransaction.Token")
	proto.RegisterType((*PlainTransaction_TransferToken)(nil), "qrl.PlainTransaction.TransferToken")
	proto.RegisterType((*PlainTransaction_Slave)(nil), "qrl.PlainTransaction.Slave")
	proto.RegisterType((*PlainBlockHeader)(nil), "qrl.PlainBlockHeader")
	proto.RegisterType((*PlainBlock)(nil), "qrl.PlainBlock")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WalletAPI service

type WalletAPIClient interface {
	AddNewAddress(ctx context.Context, in *AddNewAddressReq, opts ...grpc.CallOption) (*AddNewAddressResp, error)
	AddNewAddressWithSlaves(ctx context.Context, in *AddNewAddressWithSlavesReq, opts ...grpc.CallOption) (*AddNewAddressResp, error)
	IsValidAddress(ctx context.Context, in *ValidAddressReq, opts ...grpc.CallOption) (*ValidAddressResp, error)
	ListAddresses(ctx context.Context, in *ListAddressesReq, opts ...grpc.CallOption) (*ListAddressesResp, error)
	RemoveAddress(ctx context.Context, in *RemoveAddressReq, opts ...grpc.CallOption) (*RemoveAddressResp, error)
	EncryptWallet(ctx context.Context, in *EncryptWalletReq, opts ...grpc.CallOption) (*EncryptWalletResp, error)
	LockWallet(ctx context.Context, in *LockWalletReq, opts ...grpc.CallOption) (*LockWalletResp, error)
	UnlockWallet(ctx context.Context, in *UnlockWalletReq, opts ...grpc.CallOption) (*UnlockWalletResp, error)
	GetRecoverySeeds(ctx context.Context, in *GetRecoverySeedsReq, opts ...grpc.CallOption) (*GetRecoverySeedsResp, error)
	GetWalletInfo(ctx context.Context, in *GetWalletInfoReq, opts ...grpc.CallOption) (*GetWalletInfoResp, error)
	RelayTransferTxn(ctx context.Context, in *RelayTransferTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTransferTxnBySlave(ctx context.Context, in *RelayTransferTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayMessageTxn(ctx context.Context, in *RelayMessageTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayMessageTxnBySlave(ctx context.Context, in *RelayMessageTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTokenTxn(ctx context.Context, in *RelayTokenTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTokenTxnBySlave(ctx context.Context, in *RelayTokenTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTransferTokenTxn(ctx context.Context, in *RelayTransferTokenTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTransferTokenTxnBySlave(ctx context.Context, in *RelayTransferTokenTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelaySlaveTxn(ctx context.Context, in *RelaySlaveTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelaySlaveTxnBySlave(ctx context.Context, in *RelaySlaveTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	ChangePassphrase(ctx context.Context, in *ChangePassphraseReq, opts ...grpc.CallOption) (*ChangePassphraseResp, error)
	GetTransactionsByAddress(ctx context.Context, in *TransactionsByAddressReq, opts ...grpc.CallOption) (*TransactionsByAddressResp, error)
	GetTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionResp, error)
	GetBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error)
	GetOTS(ctx context.Context, in *OTSReq, opts ...grpc.CallOption) (*OTSResp, error)
	GetHeight(ctx context.Context, in *HeightReq, opts ...grpc.CallOption) (*HeightResp, error)
	GetBlock(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockResp, error)
	GetBlockByNumber(ctx context.Context, in *BlockByNumberReq, opts ...grpc.CallOption) (*BlockResp, error)
	GetAddressFromPK(ctx context.Context, in *AddressFromPKReq, opts ...grpc.CallOption) (*AddressFromPKResp, error)
	GetNodeInfo(ctx context.Context, in *NodeInfoReq, opts ...grpc.CallOption) (*NodeInfoResp, error)
}

type walletAPIClient struct {
	cc *grpc.ClientConn
}

func NewWalletAPIClient(cc *grpc.ClientConn) WalletAPIClient {
	return &walletAPIClient{cc}
}

func (c *walletAPIClient) AddNewAddress(ctx context.Context, in *AddNewAddressReq, opts ...grpc.CallOption) (*AddNewAddressResp, error) {
	out := new(AddNewAddressResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/AddNewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) AddNewAddressWithSlaves(ctx context.Context, in *AddNewAddressWithSlavesReq, opts ...grpc.CallOption) (*AddNewAddressResp, error) {
	out := new(AddNewAddressResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/AddNewAddressWithSlaves", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) IsValidAddress(ctx context.Context, in *ValidAddressReq, opts ...grpc.CallOption) (*ValidAddressResp, error) {
	out := new(ValidAddressResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/IsValidAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) ListAddresses(ctx context.Context, in *ListAddressesReq, opts ...grpc.CallOption) (*ListAddressesResp, error) {
	out := new(ListAddressesResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/ListAddresses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RemoveAddress(ctx context.Context, in *RemoveAddressReq, opts ...grpc.CallOption) (*RemoveAddressResp, error) {
	out := new(RemoveAddressResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RemoveAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) EncryptWallet(ctx context.Context, in *EncryptWalletReq, opts ...grpc.CallOption) (*EncryptWalletResp, error) {
	out := new(EncryptWalletResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/EncryptWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) LockWallet(ctx context.Context, in *LockWalletReq, opts ...grpc.CallOption) (*LockWalletResp, error) {
	out := new(LockWalletResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/LockWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) UnlockWallet(ctx context.Context, in *UnlockWalletReq, opts ...grpc.CallOption) (*UnlockWalletResp, error) {
	out := new(UnlockWalletResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/UnlockWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetRecoverySeeds(ctx context.Context, in *GetRecoverySeedsReq, opts ...grpc.CallOption) (*GetRecoverySeedsResp, error) {
	out := new(GetRecoverySeedsResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetRecoverySeeds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetWalletInfo(ctx context.Context, in *GetWalletInfoReq, opts ...grpc.CallOption) (*GetWalletInfoResp, error) {
	out := new(GetWalletInfoResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetWalletInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTransferTxn(ctx context.Context, in *RelayTransferTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelayTransferTxn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTransferTxnBySlave(ctx context.Context, in *RelayTransferTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelayTransferTxnBySlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayMessageTxn(ctx context.Context, in *RelayMessageTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelayMessageTxn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayMessageTxnBySlave(ctx context.Context, in *RelayMessageTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelayMessageTxnBySlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTokenTxn(ctx context.Context, in *RelayTokenTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelayTokenTxn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTokenTxnBySlave(ctx context.Context, in *RelayTokenTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelayTokenTxnBySlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTransferTokenTxn(ctx context.Context, in *RelayTransferTokenTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelayTransferTokenTxn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTransferTokenTxnBySlave(ctx context.Context, in *RelayTransferTokenTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelayTransferTokenTxnBySlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelaySlaveTxn(ctx context.Context, in *RelaySlaveTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelaySlaveTxn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelaySlaveTxnBySlave(ctx context.Context, in *RelaySlaveTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/RelaySlaveTxnBySlave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) ChangePassphrase(ctx context.Context, in *ChangePassphraseReq, opts ...grpc.CallOption) (*ChangePassphraseResp, error) {
	out := new(ChangePassphraseResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/ChangePassphrase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetTransactionsByAddress(ctx context.Context, in *TransactionsByAddressReq, opts ...grpc.CallOption) (*TransactionsByAddressResp, error) {
	out := new(TransactionsByAddressResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetTransactionsByAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error) {
	out := new(BalanceResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetOTS(ctx context.Context, in *OTSReq, opts ...grpc.CallOption) (*OTSResp, error) {
	out := new(OTSResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetOTS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetHeight(ctx context.Context, in *HeightReq, opts ...grpc.CallOption) (*HeightResp, error) {
	out := new(HeightResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetBlock(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetBlockByNumber(ctx context.Context, in *BlockByNumberReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetBlockByNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetAddressFromPK(ctx context.Context, in *AddressFromPKReq, opts ...grpc.CallOption) (*AddressFromPKResp, error) {
	out := new(AddressFromPKResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetAddressFromPK", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetNodeInfo(ctx context.Context, in *NodeInfoReq, opts ...grpc.CallOption) (*NodeInfoResp, error) {
	out := new(NodeInfoResp)
	err := grpc.Invoke(ctx, "/qrl.WalletAPI/GetNodeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletAPI service

type WalletAPIServer interface {
	AddNewAddress(context.Context, *AddNewAddressReq) (*AddNewAddressResp, error)
	AddNewAddressWithSlaves(context.Context, *AddNewAddressWithSlavesReq) (*AddNewAddressResp, error)
	IsValidAddress(context.Context, *ValidAddressReq) (*ValidAddressResp, error)
	ListAddresses(context.Context, *ListAddressesReq) (*ListAddressesResp, error)
	RemoveAddress(context.Context, *RemoveAddressReq) (*RemoveAddressResp, error)
	EncryptWallet(context.Context, *EncryptWalletReq) (*EncryptWalletResp, error)
	LockWallet(context.Context, *LockWalletReq) (*LockWalletResp, error)
	UnlockWallet(context.Context, *UnlockWalletReq) (*UnlockWalletResp, error)
	GetRecoverySeeds(context.Context, *GetRecoverySeedsReq) (*GetRecoverySeedsResp, error)
	GetWalletInfo(context.Context, *GetWalletInfoReq) (*GetWalletInfoResp, error)
	RelayTransferTxn(context.Context, *RelayTransferTxnReq) (*RelayTxnResp, error)
	RelayTransferTxnBySlave(context.Context, *RelayTransferTxnBySlaveReq) (*RelayTxnResp, error)
	RelayMessageTxn(context.Context, *RelayMessageTxnReq) (*RelayTxnResp, error)
	RelayMessageTxnBySlave(context.Context, *RelayMessageTxnBySlaveReq) (*RelayTxnResp, error)
	RelayTokenTxn(context.Context, *RelayTokenTxnReq) (*RelayTxnResp, error)
	RelayTokenTxnBySlave(context.Context, *RelayTokenTxnBySlaveReq) (*RelayTxnResp, error)
	RelayTransferTokenTxn(context.Context, *RelayTransferTokenTxnReq) (*RelayTxnResp, error)
	RelayTransferTokenTxnBySlave(context.Context, *RelayTransferTokenTxnBySlaveReq) (*RelayTxnResp, error)
	RelaySlaveTxn(context.Context, *RelaySlaveTxnReq) (*RelayTxnResp, error)
	RelaySlaveTxnBySlave(context.Context, *RelaySlaveTxnBySlaveReq) (*RelayTxnResp, error)
	ChangePassphrase(context.Context, *ChangePassphraseReq) (*ChangePassphraseResp, error)
	GetTransactionsByAddress(context.Context, *TransactionsByAddressReq) (*TransactionsByAddressResp, error)
	GetTransaction(context.Context, *TransactionReq) (*TransactionResp, error)
	GetBalance(context.Context, *BalanceReq) (*BalanceResp, error)
	GetOTS(context.Context, *OTSReq) (*OTSResp, error)
	GetHeight(context.Context, *HeightReq) (*HeightResp, error)
	GetBlock(context.Context, *BlockReq) (*BlockResp, error)
	GetBlockByNumber(context.Context, *BlockByNumberReq) (*BlockResp, error)
	GetAddressFromPK(context.Context, *AddressFromPKReq) (*AddressFromPKResp, error)
	GetNodeInfo(context.Context, *NodeInfoReq) (*NodeInfoResp, error)
}

func RegisterWalletAPIServer(s *grpc.Server, srv WalletAPIServer) {
	s.RegisterService(&_WalletAPI_serviceDesc, srv)
}

func _WalletAPI_AddNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).AddNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/AddNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).AddNewAddress(ctx, req.(*AddNewAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_AddNewAddressWithSlaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewAddressWithSlavesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).AddNewAddressWithSlaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/AddNewAddressWithSlaves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).AddNewAddressWithSlaves(ctx, req.(*AddNewAddressWithSlavesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_IsValidAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).IsValidAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/IsValidAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).IsValidAddress(ctx, req.(*ValidAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).ListAddresses(ctx, req.(*ListAddressesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RemoveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RemoveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RemoveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RemoveAddress(ctx, req.(*RemoveAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_EncryptWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).EncryptWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/EncryptWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).EncryptWallet(ctx, req.(*EncryptWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_LockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).LockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/LockWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).LockWallet(ctx, req.(*LockWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_UnlockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).UnlockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/UnlockWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).UnlockWallet(ctx, req.(*UnlockWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetRecoverySeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecoverySeedsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetRecoverySeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetRecoverySeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetRecoverySeeds(ctx, req.(*GetRecoverySeedsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetWalletInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetWalletInfo(ctx, req.(*GetWalletInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTransferTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTransferTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTransferTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelayTransferTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTransferTxn(ctx, req.(*RelayTransferTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTransferTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTransferTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTransferTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelayTransferTxnBySlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTransferTxnBySlave(ctx, req.(*RelayTransferTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayMessageTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayMessageTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayMessageTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelayMessageTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayMessageTxn(ctx, req.(*RelayMessageTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayMessageTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayMessageTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayMessageTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelayMessageTxnBySlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayMessageTxnBySlave(ctx, req.(*RelayMessageTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTokenTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTokenTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTokenTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelayTokenTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTokenTxn(ctx, req.(*RelayTokenTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTokenTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTokenTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTokenTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelayTokenTxnBySlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTokenTxnBySlave(ctx, req.(*RelayTokenTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTransferTokenTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTransferTokenTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTransferTokenTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelayTransferTokenTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTransferTokenTxn(ctx, req.(*RelayTransferTokenTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTransferTokenTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTransferTokenTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTransferTokenTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelayTransferTokenTxnBySlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTransferTokenTxnBySlave(ctx, req.(*RelayTransferTokenTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelaySlaveTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelaySlaveTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelaySlaveTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelaySlaveTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelaySlaveTxn(ctx, req.(*RelaySlaveTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelaySlaveTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelaySlaveTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelaySlaveTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/RelaySlaveTxnBySlave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelaySlaveTxnBySlave(ctx, req.(*RelaySlaveTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_ChangePassphrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePassphraseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).ChangePassphrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/ChangePassphrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).ChangePassphrase(ctx, req.(*ChangePassphraseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetTransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetTransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetTransactionsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetTransactionsByAddress(ctx, req.(*TransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetTransaction(ctx, req.(*TransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetBalance(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetOTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetOTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetOTS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetOTS(ctx, req.(*OTSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetHeight(ctx, req.(*HeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetBlock(ctx, req.(*BlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetBlockByNumber(ctx, req.(*BlockByNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetAddressFromPK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressFromPKReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetAddressFromPK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetAddressFromPK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetAddressFromPK(ctx, req.(*AddressFromPKReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrl.WalletAPI/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetNodeInfo(ctx, req.(*NodeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qrl.WalletAPI",
	HandlerType: (*WalletAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewAddress",
			Handler:    _WalletAPI_AddNewAddress_Handler,
		},
		{
			MethodName: "AddNewAddressWithSlaves",
			Handler:    _WalletAPI_AddNewAddressWithSlaves_Handler,
		},
		{
			MethodName: "IsValidAddress",
			Handler:    _WalletAPI_IsValidAddress_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _WalletAPI_ListAddresses_Handler,
		},
		{
			MethodName: "RemoveAddress",
			Handler:    _WalletAPI_RemoveAddress_Handler,
		},
		{
			MethodName: "EncryptWallet",
			Handler:    _WalletAPI_EncryptWallet_Handler,
		},
		{
			MethodName: "LockWallet",
			Handler:    _WalletAPI_LockWallet_Handler,
		},
		{
			MethodName: "UnlockWallet",
			Handler:    _WalletAPI_UnlockWallet_Handler,
		},
		{
			MethodName: "GetRecoverySeeds",
			Handler:    _WalletAPI_GetRecoverySeeds_Handler,
		},
		{
			MethodName: "GetWalletInfo",
			Handler:    _WalletAPI_GetWalletInfo_Handler,
		},
		{
			MethodName: "RelayTransferTxn",
			Handler:    _WalletAPI_RelayTransferTxn_Handler,
		},
		{
			MethodName: "RelayTransferTxnBySlave",
			Handler:    _WalletAPI_RelayTransferTxnBySlave_Handler,
		},
		{
			MethodName: "RelayMessageTxn",
			Handler:    _WalletAPI_RelayMessageTxn_Handler,
		},
		{
			MethodName: "RelayMessageTxnBySlave",
			Handler:    _WalletAPI_RelayMessageTxnBySlave_Handler,
		},
		{
			MethodName: "RelayTokenTxn",
			Handler:    _WalletAPI_RelayTokenTxn_Handler,
		},
		{
			MethodName: "RelayTokenTxnBySlave",
			Handler:    _WalletAPI_RelayTokenTxnBySlave_Handler,
		},
		{
			MethodName: "RelayTransferTokenTxn",
			Handler:    _WalletAPI_RelayTransferTokenTxn_Handler,
		},
		{
			MethodName: "RelayTransferTokenTxnBySlave",
			Handler:    _WalletAPI_RelayTransferTokenTxnBySlave_Handler,
		},
		{
			MethodName: "RelaySlaveTxn",
			Handler:    _WalletAPI_RelaySlaveTxn_Handler,
		},
		{
			MethodName: "RelaySlaveTxnBySlave",
			Handler:    _WalletAPI_RelaySlaveTxnBySlave_Handler,
		},
		{
			MethodName: "ChangePassphrase",
			Handler:    _WalletAPI_ChangePassphrase_Handler,
		},
		{
			MethodName: "GetTransactionsByAddress",
			Handler:    _WalletAPI_GetTransactionsByAddress_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _WalletAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _WalletAPI_GetBalance_Handler,
		},
		{
			MethodName: "GetOTS",
			Handler:    _WalletAPI_GetOTS_Handler,
		},
		{
			MethodName: "GetHeight",
			Handler:    _WalletAPI_GetHeight_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _WalletAPI_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _WalletAPI_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetAddressFromPK",
			Handler:    _WalletAPI_GetAddressFromPK_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _WalletAPI_GetNodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qrlwallet.proto",
}

func init() { proto.RegisterFile("qrlwallet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2811 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x1a, 0xdb, 0x72, 0x1c, 0x47,
	0xd5, 0xb3, 0xba, 0xee, 0xd9, 0xab, 0x5a, 0xb2, 0xb4, 0x1e, 0x5f, 0x64, 0x77, 0x12, 0x47, 0x89,
	0x43, 0x52, 0x51, 0xe0, 0x21, 0x17, 0x0a, 0x24, 0x13, 0x4b, 0x2e, 0x2b, 0xb6, 0x18, 0x2b, 0x04,
	0x48, 0xc2, 0xd4, 0x68, 0xb7, 0xa5, 0x9d, 0xda, 0xdd, 0x99, 0xf5, 0xf4, 0xe8, 0x56, 0x3c, 0x41,
	0x8a, 0x07, 0x78, 0x84, 0x0f, 0xa0, 0x8a, 0xaa, 0x3c, 0x50, 0x7c, 0x01, 0xfc, 0x04, 0x0f, 0x50,
	0xc5, 0x0f, 0xf0, 0xc0, 0x1f, 0xf0, 0x4a, 0xf5, 0xe9, 0x9e, 0x9d, 0xee, 0x99, 0xd9, 0xb5, 0x16,
	0x9c, 0x72, 0x15, 0x6f, 0xdb, 0x67, 0xfa, 0x5c, 0xfa, 0xdc, 0xfa, 0xf4, 0x39, 0x0b, 0x8d, 0x67,
	0x51, 0xff, 0xcc, 0xeb, 0xf7, 0x59, 0xfc, 0xf6, 0x30, 0x0a, 0xe3, 0x90, 0xcc, 0x3c, 0x8b, 0xfa,
	0x76, 0xf9, 0x59, 0xd4, 0x97, 0x6b, 0xfb, 0xc6, 0x71, 0x18, 0x1e, 0xf7, 0xd9, 0x3b, 0xde, 0xd0,
	0x7f, 0xc7, 0x0b, 0x82, 0x30, 0xf6, 0x62, 0x3f, 0x0c, 0xb8, 0xfc, 0x4a, 0x9f, 0x40, 0x73, 0xab,
	0xd3, 0x79, 0xcc, 0xce, 0xb6, 0x3a, 0x9d, 0x88, 0x71, 0xee, 0xb0, 0x67, 0x64, 0x15, 0xe6, 0xbb,
	0xcc, 0x3f, 0xee, 0xc6, 0x2d, 0xeb, 0xb6, 0xb5, 0x31, 0xeb, 0xa8, 0x15, 0x79, 0x05, 0x6a, 0x5d,
	0x8f, 0x77, 0xdd, 0xa3, 0x93, 0xa0, 0x2d, 0x68, 0xb4, 0x4a, 0xb7, 0xad, 0x8d, 0xb2, 0x53, 0x15,
	0xc0, 0x07, 0x0a, 0x46, 0x3f, 0x83, 0xa5, 0x0c, 0x41, 0x3e, 0x24, 0x04, 0x66, 0xdb, 0x61, 0x87,
	0x21, 0xbd, 0x9a, 0x83, 0xbf, 0xc9, 0x0a, 0xcc, 0xb1, 0x28, 0x0a, 0x23, 0x45, 0x45, 0x2e, 0x48,
	0x0b, 0x16, 0x3c, 0x89, 0xd8, 0x9a, 0x41, 0x78, 0xb2, 0xa4, 0x5f, 0x59, 0x60, 0x1b, 0x94, 0x3f,
	0xf3, 0xe3, 0xee, 0xd3, 0xbe, 0x77, 0xca, 0x26, 0x0a, 0xbd, 0x01, 0xcd, 0xe0, 0x64, 0x70, 0xc8,
	0x22, 0x37, 0x3c, 0x72, 0x39, 0x6e, 0x47, 0x8e, 0xb3, 0x4e, 0x5d, 0xc2, 0x9f, 0x1c, 0x49, 0x22,
	0xf9, 0xe3, 0xcd, 0x14, 0x1c, 0xef, 0x1e, 0x5c, 0xdd, 0xea, 0x74, 0x94, 0x04, 0x0f, 0xa2, 0x70,
	0xf0, 0x94, 0xb1, 0x8e, 0xe0, 0x4f, 0x60, 0x96, 0x33, 0xd6, 0x41, 0xee, 0x65, 0x07, 0x7f, 0xd3,
	0x2f, 0x60, 0xb5, 0x68, 0xf3, 0x0b, 0x52, 0x08, 0x81, 0xe6, 0x9e, 0xcf, 0x63, 0x45, 0x1e, 0xb5,
	0x40, 0x3f, 0x87, 0xa5, 0x0c, 0x6c, 0x2a, 0x66, 0x37, 0xa0, 0xec, 0x25, 0xa8, 0xad, 0x99, 0xdb,
	0x33, 0x1b, 0x65, 0x27, 0x05, 0xd0, 0xb7, 0xa0, 0xe9, 0xb0, 0x41, 0x78, 0xca, 0x34, 0x5f, 0xd1,
	0xc4, 0xb3, 0x4c, 0xf1, 0xbe, 0x0b, 0x4b, 0x99, 0xdd, 0xd3, 0x88, 0x42, 0xef, 0x41, 0xe3, 0x47,
	0x5e, 0xdf, 0xef, 0x5c, 0x8a, 0x97, 0x03, 0x4d, 0x73, 0xf3, 0x54, 0xa7, 0x5e, 0x81, 0xb9, 0x53,
	0x81, 0xad, 0x14, 0x2c, 0x17, 0x74, 0x13, 0x9a, 0x1f, 0x07, 0xed, 0xe8, 0x62, 0x18, 0x7f, 0x86,
	0xe1, 0x25, 0x24, 0xb8, 0x05, 0x30, 0xf4, 0x38, 0x1f, 0x76, 0x23, 0x8f, 0x33, 0x25, 0x84, 0x06,
	0x11, 0x67, 0xce, 0xe0, 0x4c, 0x75, 0xe6, 0x77, 0xa1, 0xf1, 0x69, 0xd0, 0x0f, 0xdb, 0xbd, 0xcb,
	0x73, 0xfc, 0x08, 0x9a, 0x26, 0xca, 0x54, 0x0c, 0x1b, 0x50, 0xdb, 0xd3, 0xd9, 0xd1, 0x0f, 0xa0,
	0xbe, 0xf7, 0xdf, 0x12, 0x7b, 0x07, 0x96, 0x77, 0x04, 0x52, 0x3b, 0x3c, 0x65, 0xd1, 0x85, 0x70,
	0xf5, 0xe7, 0x58, 0xed, 0x14, 0x56, 0xf2, 0x08, 0xd3, 0x06, 0x47, 0x97, 0x9d, 0x63, 0xdc, 0xa9,
	0xe0, 0x50, 0x4b, 0x62, 0xc3, 0xe2, 0x20, 0x60, 0x83, 0x30, 0xf0, 0xdb, 0xad, 0x59, 0xfc, 0x34,
	0x5a, 0x8b, 0xc0, 0xd9, 0x61, 0xca, 0x42, 0x0f, 0x83, 0xa3, 0x50, 0x1c, 0xfc, 0xf7, 0x16, 0x2c,
	0x65, 0x80, 0xd3, 0x4a, 0x72, 0xca, 0x22, 0x9e, 0xa4, 0x8d, 0x9a, 0x93, 0x2c, 0x45, 0x5a, 0x51,
	0x07, 0x76, 0xdb, 0xe1, 0x49, 0x10, 0xa3, 0x38, 0xb3, 0x4e, 0x55, 0x01, 0xef, 0x0b, 0x18, 0xb9,
	0x03, 0x55, 0x9f, 0xbb, 0x4c, 0xfa, 0x0e, 0xeb, 0xb4, 0xe6, 0x6e, 0x5b, 0x1b, 0x8b, 0x4e, 0xc5,
	0xe7, 0x1f, 0x27, 0x20, 0xfa, 0x57, 0x0b, 0x96, 0x1d, 0xd6, 0xf7, 0x2e, 0x0e, 0x22, 0x2f, 0xe0,
	0x47, 0x2c, 0x3a, 0x38, 0x0f, 0x84, 0x7e, 0xef, 0x40, 0x75, 0x14, 0xa2, 0x6e, 0x1c, 0xb6, 0x2c,
	0x0c, 0xdb, 0xca, 0x08, 0x76, 0x10, 0xa2, 0x09, 0x06, 0x82, 0x8f, 0x48, 0x7d, 0x33, 0x1b, 0xb3,
	0x4e, 0xb2, 0x24, 0x4d, 0x98, 0x39, 0x62, 0x0c, 0x45, 0x9e, 0x75, 0xc4, 0x4f, 0xf2, 0x1a, 0xd4,
	0x07, 0x1e, 0x8f, 0x59, 0xe4, 0x26, 0x56, 0x93, 0xea, 0xab, 0x49, 0xa8, 0x8a, 0x30, 0xb1, 0x8d,
	0xfb, 0xc7, 0x81, 0xb6, 0x6d, 0x4e, 0x6e, 0x93, 0xd0, 0x64, 0xdb, 0x75, 0x28, 0x87, 0x31, 0x77,
	0xfd, 0xa0, 0xc3, 0xce, 0x5b, 0xf3, 0xc8, 0x65, 0x31, 0x8c, 0xf9, 0x43, 0xb1, 0xa6, 0xbf, 0xb5,
	0xc0, 0xce, 0x9e, 0x68, 0xfb, 0x02, 0xb3, 0xf1, 0x4b, 0x3b, 0x18, 0xfd, 0x93, 0x05, 0x04, 0x85,
	0xfa, 0x84, 0x71, 0xee, 0x1d, 0x33, 0xa5, 0xe5, 0x16, 0x2c, 0x0c, 0x24, 0x20, 0xf1, 0x62, 0xb5,
	0x4c, 0x38, 0x95, 0x26, 0x71, 0x9a, 0xb9, 0x9c, 0x0a, 0x67, 0x9f, 0xab, 0xc2, 0xb9, 0x8c, 0x0a,
	0x03, 0xb8, 0x96, 0x11, 0x56, 0x53, 0xe0, 0x8b, 0x97, 0x99, 0x7e, 0x5d, 0x12, 0x77, 0x80, 0x30,
	0x59, 0xd8, 0x63, 0x81, 0xd2, 0xcd, 0x2a, 0xcc, 0xf3, 0x8b, 0xc1, 0x61, 0xd8, 0x57, 0x6c, 0xd4,
	0x4a, 0x44, 0x4f, 0xe0, 0x0d, 0x98, 0x0a, 0x14, 0xfc, 0x2d, 0xa2, 0x27, 0x3c, 0x0b, 0x58, 0x94,
	0xe4, 0x5a, 0x5c, 0x88, 0x68, 0xed, 0xb0, 0xb6, 0x3f, 0xf0, 0xfa, 0x5c, 0x85, 0xc7, 0x68, 0x6d,
	0xde, 0x49, 0x73, 0x99, 0x3b, 0x49, 0xf7, 0x80, 0xf9, 0x42, 0x0f, 0x58, 0x98, 0x74, 0xc6, 0xc5,
	0xcb, 0xd9, 0xa5, 0xfc, 0x5c, 0xbb, 0x40, 0xc6, 0x2e, 0xff, 0xb2, 0x60, 0xcd, 0xd0, 0x93, 0x66,
	0x96, 0xff, 0x2f, 0x75, 0xd1, 0x7f, 0x5b, 0xd0, 0x32, 0xa3, 0x58, 0x73, 0x8d, 0x4b, 0xc4, 0xf0,
	0x1d, 0xa8, 0xc6, 0x02, 0xc3, 0x8d, 0xcf, 0x45, 0xa5, 0xa5, 0x8e, 0x5f, 0x89, 0x25, 0x15, 0x01,
	0xd2, 0xa5, 0x9e, 0x29, 0x94, 0x7a, 0x76, 0x92, 0xd4, 0x73, 0x97, 0x33, 0xf2, 0xfc, 0x73, 0x8d,
	0xbc, 0x90, 0x31, 0xf2, 0x5f, 0x2c, 0x58, 0x2f, 0x3c, 0xf9, 0x74, 0x49, 0xec, 0xa5, 0x28, 0x40,
	0x5c, 0x27, 0x32, 0x92, 0x51, 0x54, 0x65, 0xae, 0xeb, 0x50, 0xc6, 0x12, 0xd9, 0x1d, 0xf6, 0x38,
	0x8a, 0x5a, 0x75, 0x16, 0x11, 0xb0, 0xdf, 0xe3, 0x78, 0x94, 0x76, 0x5b, 0xdc, 0x63, 0xf1, 0xc5,
	0x90, 0xc9, 0x8c, 0x5b, 0x73, 0x2a, 0x12, 0x76, 0x20, 0x40, 0x2f, 0xfd, 0x3a, 0x59, 0x33, 0x4e,
	0xa4, 0x99, 0xe1, 0x65, 0x1d, 0x8c, 0xba, 0x50, 0x95, 0x2e, 0x22, 0x14, 0x3c, 0x55, 0x45, 0xf1,
	0x1a, 0x94, 0xe2, 0x73, 0xe4, 0x58, 0xd9, 0xbc, 0xfa, 0xb6, 0x78, 0xcf, 0xed, 0xf7, 0x3d, 0x3f,
	0x40, 0x5f, 0xf3, 0xf0, 0x31, 0xe2, 0x94, 0xe2, 0x73, 0xea, 0xc1, 0xf2, 0xfd, 0xae, 0x17, 0x1c,
	0xb3, 0xfd, 0x51, 0x51, 0x28, 0x0e, 0xfc, 0x2a, 0xd4, 0xc2, 0x7e, 0x67, 0x3f, 0x5b, 0x3a, 0x9a,
	0x40, 0xb1, 0x2b, 0x60, 0x67, 0xda, 0x2e, 0x29, 0x81, 0x09, 0xa4, 0xdf, 0x87, 0x95, 0x3c, 0x8b,
	0xa9, 0x4a, 0xc3, 0x6f, 0x43, 0x4b, 0x93, 0x9b, 0x6f, 0x5f, 0x5c, 0xaa, 0xaa, 0xff, 0x83, 0x05,
	0xd7, 0xc6, 0xa0, 0x4d, 0xa5, 0xc9, 0x2d, 0x58, 0x1a, 0xf8, 0x81, 0xef, 0xc6, 0x1a, 0x2d, 0x8c,
	0xa3, 0xca, 0xe6, 0x0a, 0x2a, 0xf6, 0x13, 0x3f, 0xf0, 0x75, 0xbd, 0x36, 0x07, 0x26, 0x00, 0xf3,
	0xe6, 0xa1, 0xd7, 0xf7, 0x82, 0x76, 0x12, 0x6a, 0xc9, 0x92, 0xbe, 0x01, 0x75, 0x1d, 0x95, 0x3d,
	0x23, 0x6b, 0xb0, 0x10, 0x9f, 0xbb, 0x18, 0xca, 0x2a, 0xc1, 0xc7, 0xe7, 0xbb, 0x1e, 0xef, 0xd2,
	0x7f, 0x58, 0xd0, 0x30, 0xf6, 0x7e, 0x03, 0xfe, 0x20, 0x4c, 0xda, 0x0e, 0x83, 0x23, 0x3f, 0x1a,
	0xc8, 0x77, 0x7e, 0xe2, 0x96, 0x06, 0x50, 0xb8, 0xfc, 0xa1, 0x78, 0x35, 0xb8, 0xf2, 0x0d, 0xac,
	0xea, 0x8a, 0x0a, 0xc2, 0x1e, 0x23, 0x88, 0xbc, 0x09, 0x4b, 0x72, 0x4b, 0x97, 0x79, 0x1d, 0x16,
	0xc9, 0x03, 0xc9, 0x24, 0xd9, 0xc0, 0x0f, 0xbb, 0x08, 0xc7, 0x93, 0xdd, 0x05, 0xd8, 0x96, 0xfa,
	0x98, 0x6c, 0xd1, 0x1f, 0x42, 0x65, 0xb4, 0x6f, 0xda, 0xf2, 0x3a, 0xd1, 0xbf, 0x2a, 0xf4, 0x13,
	0xfd, 0x53, 0x98, 0x7f, 0x72, 0xf0, 0x74, 0x32, 0xdb, 0x5f, 0x5b, 0xb0, 0x80, 0x9b, 0xa6, 0xe2,
	0x79, 0x07, 0xaa, 0x22, 0xd9, 0x1c, 0xfa, 0xf1, 0x91, 0xcf, 0xfa, 0x1d, 0xf4, 0x98, 0xaa, 0x53,
	0x09, 0x63, 0xbe, 0xad, 0x40, 0xe4, 0x5d, 0xb8, 0x1a, 0xb0, 0xf3, 0xd8, 0x3d, 0x09, 0x4e, 0x38,
	0xeb, 0xb8, 0x69, 0x6e, 0x92, 0x4e, 0x42, 0xc4, 0xc7, 0x4f, 0xf1, 0xdb, 0x93, 0x24, 0x4b, 0x55,
	0xa0, 0xbc, 0x8b, 0x9d, 0x09, 0xf1, 0xea, 0x78, 0x0c, 0x90, 0x2c, 0xa6, 0x12, 0x2d, 0x6d, 0x76,
	0xcc, 0xe8, 0xcd, 0x0e, 0x7a, 0x0f, 0x16, 0xb7, 0x85, 0x69, 0x84, 0x3a, 0xd6, 0xa1, 0xa2, 0x5b,
	0x4e, 0x3d, 0x1d, 0xbb, 0xa9, 0xd1, 0xbe, 0x80, 0xb2, 0xda, 0x3c, 0xa5, 0x1f, 0xce, 0xa1, 0xf9,
	0x95, 0x2b, 0x36, 0x52, 0x57, 0x94, 0xd4, 0xe4, 0x57, 0xfa, 0x1d, 0x68, 0xe2, 0x7a, 0xfb, 0x42,
	0xfa, 0x93, 0xba, 0x0c, 0x0d, 0xaf, 0xb3, 0x72, 0x5e, 0x47, 0x29, 0xf6, 0xa3, 0x92, 0x7e, 0xc9,
	0xfe, 0x23, 0x81, 0x56, 0x87, 0xd2, 0xb0, 0xa7, 0x0e, 0x50, 0x1a, 0xf6, 0x54, 0x8b, 0x49, 0xdf,
	0xf3, 0x82, 0x3a, 0x2a, 0x35, 0xa8, 0x3c, 0x0e, 0x3b, 0x2c, 0x79, 0x13, 0x7e, 0x5d, 0x82, 0x6a,
	0xba, 0xfe, 0x5f, 0x9e, 0x83, 0xe5, 0xf4, 0x39, 0xf8, 0x3a, 0x34, 0x82, 0x93, 0x81, 0xdb, 0x0e,
	0x83, 0x80, 0xb5, 0xf5, 0x08, 0xad, 0x07, 0x27, 0x83, 0xfb, 0x29, 0x94, 0xdc, 0x95, 0x1b, 0x7b,
	0x41, 0x78, 0x16, 0xb8, 0x43, 0xc6, 0xa2, 0xd1, 0x9d, 0x18, 0x9c, 0x0c, 0x1e, 0x09, 0xe8, 0xbe,
	0x00, 0x0a, 0x5f, 0x38, 0x19, 0xc6, 0xfe, 0x80, 0xa9, 0x0b, 0x51, 0xad, 0x52, 0x65, 0x2b, 0x4f,
	0x59, 0xd0, 0x94, 0x2d, 0x9d, 0x4e, 0xb0, 0x90, 0x5b, 0xfa, 0x1e, 0x8f, 0xa5, 0x9b, 0xa8, 0x12,
	0x0f, 0xc1, 0x7b, 0x1e, 0x8f, 0x85, 0xa7, 0x90, 0x9b, 0x00, 0x01, 0x8b, 0xcf, 0xc2, 0xa8, 0xe7,
	0xfa, 0x1d, 0x55, 0x0d, 0x97, 0x15, 0xe4, 0x61, 0x87, 0x3e, 0x84, 0x65, 0xb4, 0xff, 0x0e, 0x0b,
	0x18, 0xf7, 0xb9, 0x8a, 0xf0, 0xf1, 0xf1, 0xa8, 0x47, 0x73, 0xc9, 0xcc, 0xa6, 0x0f, 0x80, 0x20,
	0x29, 0x65, 0xdf, 0x2d, 0xac, 0x72, 0x26, 0x50, 0x5a, 0x85, 0x79, 0x59, 0x09, 0x29, 0x42, 0x6a,
	0x45, 0x7f, 0x03, 0xd0, 0xcc, 0xa6, 0x47, 0x11, 0x11, 0xda, 0x95, 0x9d, 0x44, 0x44, 0x7a, 0x5f,
	0x17, 0x3c, 0x8b, 0x6e, 0x02, 0x0c, 0x4f, 0x0e, 0xfb, 0x7e, 0xdb, 0xed, 0xb1, 0x0b, 0x65, 0xca,
	0xb2, 0x84, 0x3c, 0x62, 0x17, 0xa2, 0xd8, 0x16, 0x05, 0x8a, 0x17, 0x9f, 0x44, 0x4c, 0x99, 0x31,
	0x05, 0x08, 0xd7, 0x08, 0x42, 0x71, 0x48, 0x99, 0x5d, 0xe5, 0x82, 0xbc, 0x01, 0x4d, 0xed, 0x22,
	0x32, 0xd2, 0xaa, 0x06, 0x47, 0xbd, 0xaf, 0x43, 0x45, 0xab, 0x8a, 0xd0, 0x82, 0x65, 0x07, 0xd2,
	0x92, 0x88, 0x7c, 0x04, 0x8b, 0xb1, 0xaa, 0x3d, 0xd1, 0x72, 0x95, 0xcd, 0x5b, 0x85, 0x37, 0xc3,
	0xdb, 0x49, 0x85, 0xba, 0x7b, 0xc5, 0x19, 0x61, 0x08, 0xec, 0x76, 0xe8, 0x07, 0x87, 0xe2, 0xe2,
	0x2f, 0x4f, 0xc2, 0xbe, 0x1f, 0xfa, 0xc1, 0xb6, 0xc7, 0x99, 0xc0, 0x4e, 0x30, 0xc8, 0x03, 0x28,
	0xf7, 0xbd, 0x38, 0xf6, 0xdb, 0x6c, 0xff, 0x11, 0xbe, 0x7f, 0x2a, 0x9b, 0x77, 0x8b, 0xd1, 0xf7,
	0xd4, 0xb6, 0x44, 0x6d, 0xbb, 0x57, 0x9c, 0x14, 0x95, 0xbc, 0x9f, 0xbe, 0x52, 0x2b, 0x48, 0xe5,
	0x66, 0x31, 0x15, 0xf5, 0xc4, 0xdd, 0xbd, 0x92, 0x3e, 0x63, 0xdf, 0x83, 0x39, 0xac, 0x92, 0x5b,
	0x55, 0x44, 0xbc, 0x3e, 0xe6, 0xec, 0x62, 0xcb, 0xee, 0x15, 0x47, 0xee, 0x25, 0x7b, 0x50, 0x4f,
	0x34, 0xe0, 0x4a, 0xec, 0x1a, 0x62, 0xbf, 0x32, 0x59, 0x73, 0x09, 0x95, 0x5a, 0xac, 0x03, 0x84,
	0x08, 0x58, 0x47, 0xb6, 0xea, 0x93, 0x44, 0xc0, 0x3a, 0x54, 0x88, 0x80, 0x7b, 0xed, 0xef, 0xc1,
	0x62, 0x42, 0x96, 0x5c, 0x83, 0x45, 0x61, 0x5c, 0xed, 0x71, 0x80, 0xce, 0x3d, 0xb1, 0xbb, 0x61,
	0x7f, 0x08, 0x8b, 0x89, 0x4d, 0x44, 0xb9, 0x21, 0x10, 0x24, 0x3e, 0x96, 0x1b, 0x62, 0x79, 0x10,
	0x8e, 0x8b, 0x0d, 0x7b, 0x1f, 0x9a, 0x59, 0x8b, 0x08, 0x29, 0x7a, 0x17, 0x87, 0x2c, 0x72, 0x47,
	0x89, 0x76, 0x01, 0xd7, 0xfb, 0x3d, 0x91, 0x47, 0x3a, 0x7e, 0xdf, 0x8f, 0xbb, 0xfe, 0xc9, 0x40,
	0x7c, 0x56, 0xcf, 0x93, 0x11, 0x6c, 0xbf, 0x67, 0xbf, 0x05, 0x0b, 0xca, 0x3a, 0x62, 0xb7, 0xb2,
	0x8e, 0x7e, 0xed, 0x54, 0x14, 0x4c, 0x78, 0xb5, 0xfd, 0x47, 0x0b, 0xe6, 0xa4, 0xf2, 0xbe, 0xd9,
	0x97, 0xf0, 0x36, 0x34, 0xfd, 0xc0, 0x8f, 0x7d, 0xaf, 0xef, 0xaa, 0xf4, 0x22, 0x1f, 0xc4, 0x95,
	0xcd, 0xb5, 0xd4, 0x4a, 0x46, 0xa2, 0x71, 0x1a, 0x0a, 0x41, 0xa5, 0x30, 0x6e, 0x1f, 0x43, 0xcd,
	0x70, 0x80, 0xdc, 0x63, 0xcd, 0xca, 0x3f, 0xd6, 0x74, 0x8b, 0x96, 0xc6, 0x5a, 0xd4, 0x7c, 0xc7,
	0xd9, 0x3b, 0x30, 0x87, 0x4e, 0x92, 0x7f, 0xa9, 0x94, 0xa7, 0x7a, 0xa9, 0x6c, 0x2f, 0x81, 0x9e,
	0x46, 0x04, 0x8c, 0xfe, 0xbd, 0xa4, 0x92, 0xe1, 0x76, 0x5a, 0xb6, 0x61, 0x79, 0xe0, 0xf1, 0xae,
	0xaa, 0xee, 0x46, 0xe5, 0x81, 0xc7, 0xbb, 0x6a, 0x43, 0xf6, 0xb2, 0x2e, 0xe5, 0x4b, 0xc4, 0x7b,
	0xb0, 0x24, 0xae, 0x1a, 0x1e, 0x7b, 0x83, 0xa1, 0xcb, 0x59, 0x3b, 0x0c, 0x3a, 0x5c, 0x55, 0x24,
	0xcd, 0xd1, 0x87, 0xa7, 0x12, 0x4e, 0x36, 0xa0, 0xa9, 0x31, 0x74, 0x87, 0x11, 0x3b, 0x4d, 0x6e,
	0xbe, 0x94, 0xeb, 0x7e, 0xc4, 0x4e, 0x05, 0xe7, 0x88, 0x9d, 0x79, 0x51, 0xc7, 0x95, 0x85, 0x86,
	0x2a, 0x4e, 0x25, 0x0c, 0xcf, 0x20, 0xf2, 0xb2, 0xda, 0x22, 0x12, 0xb6, 0xbc, 0xf8, 0xca, 0x12,
	0xf2, 0x80, 0x31, 0xcc, 0xf4, 0x2c, 0xea, 0xf5, 0x99, 0x1b, 0x85, 0x61, 0x9c, 0x24, 0x4e, 0x09,
	0x72, 0xc2, 0x10, 0xfb, 0xad, 0xa2, 0xc6, 0x0f, 0x8e, 0x5d, 0x99, 0xa1, 0x17, 0xf1, 0x46, 0xaf,
	0x48, 0xd8, 0x63, 0xcc, 0xd3, 0xeb, 0x50, 0x61, 0xe7, 0x71, 0xe4, 0xa9, 0x1d, 0x65, 0xe4, 0x01,
	0x08, 0xc2, 0x0d, 0xf4, 0xcf, 0x16, 0x40, 0xaa, 0x56, 0xf2, 0x2d, 0x51, 0x93, 0x8d, 0x74, 0x69,
	0xd4, 0xe8, 0x9a, 0xde, 0x1d, 0xb5, 0x89, 0xbc, 0x0f, 0x55, 0xe3, 0x3d, 0x52, 0x42, 0xcf, 0x1c,
	0x53, 0xd8, 0x1b, 0x5b, 0xc9, 0x16, 0x34, 0x8e, 0xe5, 0x55, 0xeb, 0xa6, 0x45, 0xb1, 0xc0, 0x6e,
	0xa5, 0xd8, 0xe6, 0x5d, 0xec, 0xd4, 0x8f, 0x8d, 0xf5, 0xe6, 0x2f, 0xd6, 0xa0, 0x2c, 0x7b, 0xdd,
	0x5b, 0xfb, 0x0f, 0xc9, 0x97, 0x50, 0x33, 0x26, 0x6b, 0x44, 0x8a, 0x91, 0x1d, 0x0c, 0xda, 0xab,
	0x45, 0x60, 0x3e, 0xa4, 0x37, 0x7f, 0xf9, 0xb7, 0x7f, 0xfe, 0xae, 0xb4, 0x46, 0x09, 0x0e, 0x19,
	0x8d, 0xef, 0x1f, 0x58, 0x6f, 0x92, 0x9f, 0xc3, 0xda, 0x98, 0xc1, 0x1d, 0x59, 0xcf, 0x53, 0x34,
	0xc6, 0x7a, 0x63, 0x59, 0xbe, 0x8e, 0x2c, 0xef, 0xd0, 0x1b, 0x79, 0x96, 0x29, 0x01, 0xc1, 0xfc,
	0x4b, 0xa8, 0x3f, 0xe4, 0xfa, 0x70, 0x88, 0xc8, 0x37, 0x5f, 0x66, 0xb8, 0x64, 0x5f, 0x2d, 0x80,
	0xf2, 0x21, 0xbd, 0x85, 0x7c, 0x5a, 0x74, 0x19, 0xf9, 0x98, 0x94, 0x04, 0xf9, 0x9f, 0x42, 0xcd,
	0x18, 0xb8, 0x29, 0xd5, 0x65, 0x07, 0x73, 0xea, 0x1c, 0xb9, 0xd9, 0x1c, 0xb5, 0x91, 0xfe, 0x0a,
	0x91, 0xaa, 0x33, 0x49, 0x7d, 0x09, 0x35, 0x63, 0x82, 0xa6, 0x68, 0x67, 0x67, 0x70, 0x8a, 0x76,
	0x6e, 0xd8, 0x96, 0x31, 0x8b, 0xf1, 0x5d, 0x6a, 0xa6, 0x66, 0x0c, 0xab, 0x14, 0xf9, 0xec, 0xd0,
	0x4b, 0x91, 0xcf, 0xcd, 0xb5, 0x32, 0xe4, 0x8d, 0xef, 0x82, 0xfc, 0x63, 0x80, 0x74, 0x94, 0x44,
	0x88, 0x3c, 0xbf, 0x3e, 0x6c, 0xb2, 0x97, 0x73, 0x30, 0x3e, 0xa4, 0x6b, 0x48, 0x75, 0x89, 0x34,
	0xa4, 0x42, 0x52, 0x0a, 0x3f, 0x81, 0xaa, 0x3e, 0xe9, 0x52, 0x66, 0xcc, 0xcc, 0xcb, 0x94, 0x19,
	0xb3, 0x23, 0x31, 0x7a, 0x03, 0xa9, 0xae, 0xd2, 0x25, 0xa4, 0xaa, 0x7f, 0x16, 0xa2, 0xfa, 0x38,
	0x10, 0x32, 0x06, 0x51, 0x44, 0xc6, 0x52, 0xc1, 0x40, 0xcb, 0xbe, 0x36, 0xe6, 0x0b, 0x1f, 0xd2,
	0xdb, 0xc8, 0xc6, 0xa6, 0x57, 0x91, 0x4d, 0x76, 0x8b, 0xf2, 0x17, 0x63, 0xcc, 0xa4, 0x94, 0x9e,
	0x9d, 0x47, 0x29, 0xa5, 0xe7, 0x26, 0x52, 0x19, 0x7f, 0x31, 0x49, 0x79, 0x49, 0x6f, 0x3e, 0x1d,
	0xa7, 0xa8, 0x63, 0x14, 0xcc, 0x8d, 0xec, 0x25, 0xed, 0x8b, 0x6c, 0x4e, 0x65, 0xc4, 0xcf, 0x22,
	0x09, 0xf1, 0x4f, 0x93, 0xb6, 0x76, 0x6e, 0x62, 0xa3, 0x42, 0x79, 0xfc, 0x3c, 0xa7, 0x88, 0xa1,
	0x19, 0xc5, 0x63, 0x70, 0x05, 0xdf, 0x9f, 0x41, 0x23, 0x33, 0xe7, 0x20, 0x6b, 0x29, 0x39, 0x63,
	0x54, 0x53, 0xc4, 0x67, 0x1d, 0xf9, 0x5c, 0xa3, 0x2b, 0x29, 0x9f, 0x14, 0x47, 0xd0, 0xe7, 0xb0,
	0x5a, 0x3c, 0x47, 0x21, 0xb7, 0x8a, 0xd8, 0x4c, 0x3e, 0xd5, 0x5d, 0xe4, 0x76, 0x9b, 0x5e, 0x2f,
	0xe2, 0xa6, 0x1d, 0xea, 0xc7, 0x22, 0xbe, 0xb5, 0x19, 0xc1, 0x28, 0xbe, 0xcd, 0xf9, 0x4a, 0x11,
	0x8b, 0x6c, 0x68, 0x6b, 0x18, 0x82, 0xf2, 0x00, 0x56, 0x8a, 0xa6, 0x0f, 0xe4, 0x46, 0x9e, 0xc1,
	0xe4, 0xa3, 0xbc, 0x8a, 0x7c, 0x6e, 0xd1, 0x6b, 0x79, 0x3e, 0xda, 0x41, 0x86, 0x70, 0xb5, 0xb0,
	0x0f, 0x4e, 0x6e, 0x16, 0xf8, 0xc4, 0xe4, 0x83, 0xbd, 0x86, 0x0c, 0xd7, 0xa9, 0x5d, 0xe0, 0x11,
	0xda, 0x01, 0x7f, 0x65, 0xc1, 0x8d, 0x49, 0xad, 0x77, 0xf2, 0xea, 0x78, 0xce, 0x93, 0x4f, 0xfc,
	0x16, 0x0a, 0x70, 0x97, 0xde, 0x19, 0x2f, 0x40, 0x81, 0x09, 0x93, 0x96, 0xb3, 0x6e, 0x42, 0xad,
	0xb1, 0x7e, 0x49, 0x13, 0x26, 0x18, 0xba, 0x09, 0x33, 0xcd, 0x6c, 0xdd, 0x84, 0xf9, 0x3e, 0xf7,
	0x25, 0x4d, 0x98, 0x41, 0x54, 0x29, 0x30, 0xdb, 0xe3, 0x55, 0xb9, 0xa3, 0xa0, 0xbb, 0xac, 0x52,
	0x60, 0x51, 0x53, 0x38, 0x93, 0x43, 0xb2, 0x5b, 0x04, 0xab, 0xaf, 0x2c, 0x68, 0xed, 0xb0, 0xb8,
	0xb0, 0xb3, 0xab, 0x3c, 0x66, 0x5c, 0xb3, 0xd8, 0xbe, 0x35, 0xe9, 0x33, 0x1f, 0xd2, 0x0d, 0xe4,
	0x4e, 0xe9, 0xcd, 0x24, 0x3d, 0x16, 0x6e, 0x15, 0x52, 0x7c, 0x0e, 0x75, 0xf3, 0x33, 0x59, 0xce,
	0xd2, 0x16, 0x0c, 0x57, 0xf2, 0xc0, 0x5c, 0x55, 0x60, 0xd2, 0x11, 0xc4, 0x1f, 0x01, 0xec, 0xb0,
	0x38, 0x69, 0x84, 0xc8, 0x16, 0x59, 0xda, 0x20, 0xb5, 0x9b, 0x26, 0x20, 0x4d, 0xeb, 0xb4, 0x91,
	0x10, 0x54, 0x1f, 0x05, 0xb1, 0x0f, 0x61, 0x7e, 0x87, 0xc5, 0x4f, 0x0e, 0x9e, 0x92, 0x0a, 0xe2,
	0xc9, 0x76, 0xa7, 0x5d, 0x4d, 0x17, 0x7c, 0x48, 0x57, 0x91, 0x40, 0x93, 0x56, 0x12, 0x02, 0x4f,
	0x0e, 0x9e, 0x0a, 0xe4, 0x1f, 0x40, 0x79, 0x87, 0xc5, 0xaa, 0xdf, 0x53, 0x47, 0x94, 0x51, 0xfb,
	0xd1, 0x6e, 0x18, 0xeb, 0x94, 0x0a, 0xa9, 0x27, 0x54, 0x14, 0xe2, 0x7d, 0x58, 0x14, 0x32, 0x61,
	0x9d, 0x5b, 0x93, 0xc2, 0xab, 0x36, 0xa3, 0x5d, 0xd7, 0x97, 0x7c, 0x48, 0x5b, 0x48, 0x82, 0xd0,
	0xda, 0xe8, 0x24, 0xe2, 0x93, 0xd4, 0x78, 0x33, 0x59, 0x26, 0x4d, 0x41, 0x15, 0x2e, 0xd9, 0x46,
	0x61, 0x8e, 0x68, 0xee, 0x5e, 0x35, 0x30, 0x04, 0xf1, 0x36, 0x12, 0x37, 0xda, 0x82, 0x69, 0x15,
	0x6b, 0xb4, 0x13, 0xd3, 0x92, 0xd2, 0xec, 0x20, 0xe6, 0x99, 0x18, 0x5b, 0x04, 0x93, 0x3d, 0xa8,
	0xec, 0xb0, 0x38, 0x69, 0x09, 0x12, 0x69, 0x46, 0xad, 0x63, 0xa8, 0xc2, 0x4f, 0xef, 0x19, 0x26,
	0xfa, 0x20, 0xcd, 0x84, 0x6a, 0xf2, 0xf5, 0x70, 0x1e, 0xff, 0x81, 0xf7, 0xde, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x8a, 0xca, 0x92, 0xa7, 0xc2, 0x27, 0x00, 0x00,
}
